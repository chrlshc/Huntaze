'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "appconfig",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class AppConfigClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultAppConfigHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class AppConfigServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, AppConfigServiceException.prototype);
    }
}

const ActionPoint = {
    AT_DEPLOYMENT_TICK: "AT_DEPLOYMENT_TICK",
    ON_DEPLOYMENT_BAKING: "ON_DEPLOYMENT_BAKING",
    ON_DEPLOYMENT_COMPLETE: "ON_DEPLOYMENT_COMPLETE",
    ON_DEPLOYMENT_ROLLED_BACK: "ON_DEPLOYMENT_ROLLED_BACK",
    ON_DEPLOYMENT_START: "ON_DEPLOYMENT_START",
    ON_DEPLOYMENT_STEP: "ON_DEPLOYMENT_STEP",
    PRE_CREATE_HOSTED_CONFIGURATION_VERSION: "PRE_CREATE_HOSTED_CONFIGURATION_VERSION",
    PRE_START_DEPLOYMENT: "PRE_START_DEPLOYMENT",
};
exports.BadRequestDetails = void 0;
(function (BadRequestDetails) {
    BadRequestDetails.visit = (value, visitor) => {
        if (value.InvalidConfiguration !== undefined)
            return visitor.InvalidConfiguration(value.InvalidConfiguration);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.BadRequestDetails || (exports.BadRequestDetails = {}));
const BadRequestReason = {
    INVALID_CONFIGURATION: "InvalidConfiguration",
};
class BadRequestException extends AppConfigServiceException {
    name = "BadRequestException";
    $fault = "client";
    Message;
    Reason;
    Details;
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Details = opts.Details;
    }
}
class InternalServerException extends AppConfigServiceException {
    name = "InternalServerException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
class ServiceQuotaExceededException extends AppConfigServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
const ValidatorType = {
    JSON_SCHEMA: "JSON_SCHEMA",
    LAMBDA: "LAMBDA",
};
class ResourceNotFoundException extends AppConfigServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    ResourceName;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
const GrowthType = {
    EXPONENTIAL: "EXPONENTIAL",
    LINEAR: "LINEAR",
};
const ReplicateTo = {
    NONE: "NONE",
    SSM_DOCUMENT: "SSM_DOCUMENT",
};
const EnvironmentState = {
    DEPLOYING: "DEPLOYING",
    READY_FOR_DEPLOYMENT: "READY_FOR_DEPLOYMENT",
    REVERTED: "REVERTED",
    ROLLED_BACK: "ROLLED_BACK",
    ROLLING_BACK: "ROLLING_BACK",
};
class ConflictException extends AppConfigServiceException {
    name = "ConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
const BytesMeasure = {
    KILOBYTES: "KILOBYTES",
};
class PayloadTooLargeException extends AppConfigServiceException {
    name = "PayloadTooLargeException";
    $fault = "client";
    Message;
    Measure;
    Limit;
    Size;
    constructor(opts) {
        super({
            name: "PayloadTooLargeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PayloadTooLargeException.prototype);
        this.Message = opts.Message;
        this.Measure = opts.Measure;
        this.Limit = opts.Limit;
        this.Size = opts.Size;
    }
}
const DeletionProtectionCheck = {
    ACCOUNT_DEFAULT: "ACCOUNT_DEFAULT",
    APPLY: "APPLY",
    BYPASS: "BYPASS",
};
const DeploymentEventType = {
    BAKE_TIME_STARTED: "BAKE_TIME_STARTED",
    DEPLOYMENT_COMPLETED: "DEPLOYMENT_COMPLETED",
    DEPLOYMENT_STARTED: "DEPLOYMENT_STARTED",
    PERCENTAGE_UPDATED: "PERCENTAGE_UPDATED",
    REVERT_COMPLETED: "REVERT_COMPLETED",
    ROLLBACK_COMPLETED: "ROLLBACK_COMPLETED",
    ROLLBACK_STARTED: "ROLLBACK_STARTED",
};
const TriggeredBy = {
    APPCONFIG: "APPCONFIG",
    CLOUDWATCH_ALARM: "CLOUDWATCH_ALARM",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    USER: "USER",
};
const DeploymentState = {
    BAKING: "BAKING",
    COMPLETE: "COMPLETE",
    DEPLOYING: "DEPLOYING",
    REVERTED: "REVERTED",
    ROLLED_BACK: "ROLLED_BACK",
    ROLLING_BACK: "ROLLING_BACK",
    VALIDATING: "VALIDATING",
};
const ValidatorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const ConfigurationProfileFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Validators && { Validators: obj.Validators.map((item) => ValidatorFilterSensitiveLog(item)) }),
});
const CreateConfigurationProfileRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Validators && { Validators: obj.Validators.map((item) => ValidatorFilterSensitiveLog(item)) }),
});
const CreateHostedConfigurationVersionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const HostedConfigurationVersionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const ConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const StartDeploymentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DynamicExtensionParameters && { DynamicExtensionParameters: smithyClient.SENSITIVE_STRING }),
});
const UpdateConfigurationProfileRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Validators && { Validators: obj.Validators.map((item) => ValidatorFilterSensitiveLog(item)) }),
});

const se_CreateApplicationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Description: [],
        Name: [],
        Tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateConfigurationProfileCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/configurationprofiles");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Description: [],
        KmsKeyIdentifier: [],
        LocationUri: [],
        Name: [],
        RetrievalRoleArn: [],
        Tags: (_) => smithyClient._json(_),
        Type: [],
        Validators: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateDeploymentStrategyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deploymentstrategies");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        DeploymentDurationInMinutes: [],
        Description: [],
        FinalBakeTimeInMinutes: [],
        GrowthFactor: (_) => smithyClient.serializeFloat(_),
        GrowthType: [],
        Name: [],
        ReplicateTo: [],
        Tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateEnvironmentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/environments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Description: [],
        Monitors: (_) => smithyClient._json(_),
        Name: [],
        Tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateExtensionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        "content-type": "application/json",
        [_lvn]: [() => smithyClient.isSerializableHeaderValue(input[_LVN]), () => input[_LVN].toString()],
    });
    b.bp("/extensions");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Actions: (_) => smithyClient._json(_),
        Description: [],
        Name: [],
        Parameters: (_) => smithyClient._json(_),
        Tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateExtensionAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/extensionassociations");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        ExtensionIdentifier: [],
        ExtensionVersionNumber: [],
        Parameters: (_) => smithyClient._json(_),
        ResourceIdentifier: [],
        Tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateHostedConfigurationVersionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        [_ct]: input[_CT] || "application/octet-stream",
        [_d]: input[_D],
        [_lvn]: [() => smithyClient.isSerializableHeaderValue(input[_LVN]), () => input[_LVN].toString()],
        [_v]: input[_VL],
    });
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    let body;
    if (input.Content !== undefined) {
        body = input.Content;
    }
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeleteApplicationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteConfigurationProfileCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        [_xadpc]: input[_DPC],
    });
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteDeploymentStrategyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/deployementstrategies/{DeploymentStrategyId}");
    b.p("DeploymentStrategyId", () => input.DeploymentStrategyId, "{DeploymentStrategyId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteEnvironmentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        [_xadpc]: input[_DPC],
    });
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}");
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteExtensionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/extensions/{ExtensionIdentifier}");
    b.p("ExtensionIdentifier", () => input.ExtensionIdentifier, "{ExtensionIdentifier}", false);
    const query = smithyClient.map({
        [_ve]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DeleteExtensionAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/extensionassociations/{ExtensionAssociationId}");
    b.p("ExtensionAssociationId", () => input.ExtensionAssociationId, "{ExtensionAssociationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteHostedConfigurationVersionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_GetAccountSettingsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/settings");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetApplicationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetConfigurationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{Application}/environments/{Environment}/configurations/{Configuration}");
    b.p("Application", () => input.Application, "{Application}", false);
    b.p("Environment", () => input.Environment, "{Environment}", false);
    b.p("Configuration", () => input.Configuration, "{Configuration}", false);
    const query = smithyClient.map({
        [_ci]: [, smithyClient.expectNonNull(input[_CI], `ClientId`)],
        [_ccv]: [, input[_CCV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetConfigurationProfileCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetDeploymentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    b.p("DeploymentNumber", () => input.DeploymentNumber.toString(), "{DeploymentNumber}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetDeploymentStrategyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/deploymentstrategies/{DeploymentStrategyId}");
    b.p("DeploymentStrategyId", () => input.DeploymentStrategyId, "{DeploymentStrategyId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetEnvironmentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetExtensionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/extensions/{ExtensionIdentifier}");
    b.p("ExtensionIdentifier", () => input.ExtensionIdentifier, "{ExtensionIdentifier}", false);
    const query = smithyClient.map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetExtensionAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/extensionassociations/{ExtensionAssociationId}");
    b.p("ExtensionAssociationId", () => input.ExtensionAssociationId, "{ExtensionAssociationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetHostedConfigurationVersionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListApplicationsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications");
    const query = smithyClient.map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListConfigurationProfilesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = smithyClient.map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListDeploymentsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}/deployments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    const query = smithyClient.map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListDeploymentStrategiesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/deploymentstrategies");
    const query = smithyClient.map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListEnvironmentsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/environments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = smithyClient.map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListExtensionAssociationsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/extensionassociations");
    const query = smithyClient.map({
        [_ri]: [, input[_RI]],
        [_ei]: [, input[_EI]],
        [_evn]: [() => input.ExtensionVersionNumber !== void 0, () => input[_EVN].toString()],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListExtensionsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/extensions");
    const query = smithyClient.map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
        [_n]: [, input[_N]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListHostedConfigurationVersionsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    const query = smithyClient.map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
        [_vl]: [, input[_VL]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_StartDeploymentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}/deployments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        ConfigurationProfileId: [],
        ConfigurationVersion: [],
        DeploymentStrategyId: [],
        Description: [],
        DynamicExtensionParameters: (_) => smithyClient._json(_),
        KmsKeyIdentifier: [],
        Tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StopDeploymentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        [_ar]: [() => smithyClient.isSerializableHeaderValue(input[_AR]), () => input[_AR].toString()],
    });
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    b.p("DeploymentNumber", () => input.DeploymentNumber.toString(), "{DeploymentNumber}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = smithyClient.map({
        [_tK]: [smithyClient.expectNonNull(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateAccountSettingsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/settings");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        DeletionProtection: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateApplicationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Description: [],
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateConfigurationProfileCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Description: [],
        KmsKeyIdentifier: [],
        Name: [],
        RetrievalRoleArn: [],
        Validators: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateDeploymentStrategyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deploymentstrategies/{DeploymentStrategyId}");
    b.p("DeploymentStrategyId", () => input.DeploymentStrategyId, "{DeploymentStrategyId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        DeploymentDurationInMinutes: [],
        Description: [],
        FinalBakeTimeInMinutes: [],
        GrowthFactor: (_) => smithyClient.serializeFloat(_),
        GrowthType: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateEnvironmentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Description: [],
        Monitors: (_) => smithyClient._json(_),
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateExtensionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/extensions/{ExtensionIdentifier}");
    b.p("ExtensionIdentifier", () => input.ExtensionIdentifier, "{ExtensionIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Actions: (_) => smithyClient._json(_),
        Description: [],
        Parameters: (_) => smithyClient._json(_),
        VersionNumber: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateExtensionAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/extensionassociations/{ExtensionAssociationId}");
    b.p("ExtensionAssociationId", () => input.ExtensionAssociationId, "{ExtensionAssociationId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        Parameters: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_ValidateConfigurationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/validators");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    const query = smithyClient.map({
        [_cv]: [, smithyClient.expectNonNull(input[_CV], `ConfigurationVersion`)],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ApplicationId: smithyClient.expectString,
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        KmsKeyArn: smithyClient.expectString,
        KmsKeyIdentifier: smithyClient.expectString,
        LocationUri: smithyClient.expectString,
        Name: smithyClient.expectString,
        RetrievalRoleArn: smithyClient.expectString,
        Type: smithyClient.expectString,
        Validators: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        DeploymentDurationInMinutes: smithyClient.expectInt32,
        Description: smithyClient.expectString,
        FinalBakeTimeInMinutes: smithyClient.expectInt32,
        GrowthFactor: smithyClient.limitedParseFloat32,
        GrowthType: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        ReplicateTo: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ApplicationId: smithyClient.expectString,
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        Monitors: smithyClient._json,
        Name: smithyClient.expectString,
        State: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateExtensionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Actions: smithyClient._json,
        Arn: smithyClient.expectString,
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        Parameters: smithyClient._json,
        VersionNumber: smithyClient.expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateExtensionAssociationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Arn: smithyClient.expectString,
        ExtensionArn: smithyClient.expectString,
        ExtensionVersionNumber: smithyClient.expectInt32,
        Id: smithyClient.expectString,
        Parameters: smithyClient._json,
        ResourceArn: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateHostedConfigurationVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_AI]: [, output.headers[_ai]],
        [_CPI]: [, output.headers[_cpi]],
        [_VN]: [() => void 0 !== output.headers[_vn_], () => smithyClient.strictParseInt32(output.headers[_vn_])],
        [_D]: [, output.headers[_d]],
        [_CT]: [, output.headers[_ct]],
        [_VL]: [, output.headers[_v]],
        [_KKA]: [, output.headers[_k]],
    });
    const data = await smithyClient.collectBody(output.body, context);
    contents.Content = data;
    return contents;
};
const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteExtensionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteExtensionAssociationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteHostedConfigurationVersionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_GetAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        DeletionProtection: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_CV]: [, output.headers[_cv_]],
        [_CT]: [, output.headers[_ct]],
    });
    const data = await smithyClient.collectBody(output.body, context);
    contents.Content = data;
    return contents;
};
const de_GetConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ApplicationId: smithyClient.expectString,
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        KmsKeyArn: smithyClient.expectString,
        KmsKeyIdentifier: smithyClient.expectString,
        LocationUri: smithyClient.expectString,
        Name: smithyClient.expectString,
        RetrievalRoleArn: smithyClient.expectString,
        Type: smithyClient.expectString,
        Validators: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ApplicationId: smithyClient.expectString,
        AppliedExtensions: smithyClient._json,
        CompletedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        ConfigurationLocationUri: smithyClient.expectString,
        ConfigurationName: smithyClient.expectString,
        ConfigurationProfileId: smithyClient.expectString,
        ConfigurationVersion: smithyClient.expectString,
        DeploymentDurationInMinutes: smithyClient.expectInt32,
        DeploymentNumber: smithyClient.expectInt32,
        DeploymentStrategyId: smithyClient.expectString,
        Description: smithyClient.expectString,
        EnvironmentId: smithyClient.expectString,
        EventLog: (_) => de_DeploymentEvents(_),
        FinalBakeTimeInMinutes: smithyClient.expectInt32,
        GrowthFactor: smithyClient.limitedParseFloat32,
        GrowthType: smithyClient.expectString,
        KmsKeyArn: smithyClient.expectString,
        KmsKeyIdentifier: smithyClient.expectString,
        PercentageComplete: smithyClient.limitedParseFloat32,
        StartedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        State: smithyClient.expectString,
        VersionLabel: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        DeploymentDurationInMinutes: smithyClient.expectInt32,
        Description: smithyClient.expectString,
        FinalBakeTimeInMinutes: smithyClient.expectInt32,
        GrowthFactor: smithyClient.limitedParseFloat32,
        GrowthType: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        ReplicateTo: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ApplicationId: smithyClient.expectString,
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        Monitors: smithyClient._json,
        Name: smithyClient.expectString,
        State: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetExtensionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Actions: smithyClient._json,
        Arn: smithyClient.expectString,
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        Parameters: smithyClient._json,
        VersionNumber: smithyClient.expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetExtensionAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Arn: smithyClient.expectString,
        ExtensionArn: smithyClient.expectString,
        ExtensionVersionNumber: smithyClient.expectInt32,
        Id: smithyClient.expectString,
        Parameters: smithyClient._json,
        ResourceArn: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetHostedConfigurationVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_AI]: [, output.headers[_ai]],
        [_CPI]: [, output.headers[_cpi]],
        [_VN]: [() => void 0 !== output.headers[_vn_], () => smithyClient.strictParseInt32(output.headers[_vn_])],
        [_D]: [, output.headers[_d]],
        [_CT]: [, output.headers[_ct]],
        [_VL]: [, output.headers[_v]],
        [_KKA]: [, output.headers[_k]],
    });
    const data = await smithyClient.collectBody(output.body, context);
    contents.Content = data;
    return contents;
};
const de_ListApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Items: smithyClient._json,
        NextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListConfigurationProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Items: smithyClient._json,
        NextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Items: (_) => de_DeploymentList(_),
        NextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListDeploymentStrategiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Items: (_) => de_DeploymentStrategyList(_),
        NextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListEnvironmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Items: smithyClient._json,
        NextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListExtensionAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Items: smithyClient._json,
        NextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListExtensionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Items: smithyClient._json,
        NextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListHostedConfigurationVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Items: smithyClient._json,
        NextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ApplicationId: smithyClient.expectString,
        AppliedExtensions: smithyClient._json,
        CompletedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        ConfigurationLocationUri: smithyClient.expectString,
        ConfigurationName: smithyClient.expectString,
        ConfigurationProfileId: smithyClient.expectString,
        ConfigurationVersion: smithyClient.expectString,
        DeploymentDurationInMinutes: smithyClient.expectInt32,
        DeploymentNumber: smithyClient.expectInt32,
        DeploymentStrategyId: smithyClient.expectString,
        Description: smithyClient.expectString,
        EnvironmentId: smithyClient.expectString,
        EventLog: (_) => de_DeploymentEvents(_),
        FinalBakeTimeInMinutes: smithyClient.expectInt32,
        GrowthFactor: smithyClient.limitedParseFloat32,
        GrowthType: smithyClient.expectString,
        KmsKeyArn: smithyClient.expectString,
        KmsKeyIdentifier: smithyClient.expectString,
        PercentageComplete: smithyClient.limitedParseFloat32,
        StartedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        State: smithyClient.expectString,
        VersionLabel: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StopDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ApplicationId: smithyClient.expectString,
        AppliedExtensions: smithyClient._json,
        CompletedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        ConfigurationLocationUri: smithyClient.expectString,
        ConfigurationName: smithyClient.expectString,
        ConfigurationProfileId: smithyClient.expectString,
        ConfigurationVersion: smithyClient.expectString,
        DeploymentDurationInMinutes: smithyClient.expectInt32,
        DeploymentNumber: smithyClient.expectInt32,
        DeploymentStrategyId: smithyClient.expectString,
        Description: smithyClient.expectString,
        EnvironmentId: smithyClient.expectString,
        EventLog: (_) => de_DeploymentEvents(_),
        FinalBakeTimeInMinutes: smithyClient.expectInt32,
        GrowthFactor: smithyClient.limitedParseFloat32,
        GrowthType: smithyClient.expectString,
        KmsKeyArn: smithyClient.expectString,
        KmsKeyIdentifier: smithyClient.expectString,
        PercentageComplete: smithyClient.limitedParseFloat32,
        StartedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        State: smithyClient.expectString,
        VersionLabel: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UpdateAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        DeletionProtection: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ApplicationId: smithyClient.expectString,
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        KmsKeyArn: smithyClient.expectString,
        KmsKeyIdentifier: smithyClient.expectString,
        LocationUri: smithyClient.expectString,
        Name: smithyClient.expectString,
        RetrievalRoleArn: smithyClient.expectString,
        Type: smithyClient.expectString,
        Validators: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        DeploymentDurationInMinutes: smithyClient.expectInt32,
        Description: smithyClient.expectString,
        FinalBakeTimeInMinutes: smithyClient.expectInt32,
        GrowthFactor: smithyClient.limitedParseFloat32,
        GrowthType: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        ReplicateTo: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ApplicationId: smithyClient.expectString,
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        Monitors: smithyClient._json,
        Name: smithyClient.expectString,
        State: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateExtensionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Actions: smithyClient._json,
        Arn: smithyClient.expectString,
        Description: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        Parameters: smithyClient._json,
        VersionNumber: smithyClient.expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateExtensionAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Arn: smithyClient.expectString,
        ExtensionArn: smithyClient.expectString,
        ExtensionVersionNumber: smithyClient.expectInt32,
        Id: smithyClient.expectString,
        Parameters: smithyClient._json,
        ResourceArn: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ValidateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput);
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.appconfig#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.appconfig#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "PayloadTooLargeException":
        case "com.amazonaws.appconfig#PayloadTooLargeException":
            throw await de_PayloadTooLargeExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(AppConfigServiceException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Details: (_) => smithyClient._json(core$1.awsExpectUnion(_)),
        Message: smithyClient.expectString,
        Reason: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_PayloadTooLargeExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Limit: smithyClient.limitedParseFloat32,
        Measure: smithyClient.expectString,
        Message: smithyClient.expectString,
        Size: smithyClient.limitedParseFloat32,
    });
    Object.assign(contents, doc);
    const exception = new PayloadTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
        ResourceName: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_DeploymentEvent = (output, context) => {
    return smithyClient.take(output, {
        ActionInvocations: smithyClient._json,
        Description: smithyClient.expectString,
        EventType: smithyClient.expectString,
        OccurredAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        TriggeredBy: smithyClient.expectString,
    });
};
const de_DeploymentEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentEvent(entry);
    });
    return retVal;
};
const de_DeploymentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentSummary(entry);
    });
    return retVal;
};
const de_DeploymentStrategy = (output, context) => {
    return smithyClient.take(output, {
        DeploymentDurationInMinutes: smithyClient.expectInt32,
        Description: smithyClient.expectString,
        FinalBakeTimeInMinutes: smithyClient.expectInt32,
        GrowthFactor: smithyClient.limitedParseFloat32,
        GrowthType: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        ReplicateTo: smithyClient.expectString,
    });
};
const de_DeploymentStrategyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentStrategy(entry);
    });
    return retVal;
};
const de_DeploymentSummary = (output, context) => {
    return smithyClient.take(output, {
        CompletedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        ConfigurationName: smithyClient.expectString,
        ConfigurationVersion: smithyClient.expectString,
        DeploymentDurationInMinutes: smithyClient.expectInt32,
        DeploymentNumber: smithyClient.expectInt32,
        FinalBakeTimeInMinutes: smithyClient.expectInt32,
        GrowthFactor: smithyClient.limitedParseFloat32,
        GrowthType: smithyClient.expectString,
        PercentageComplete: smithyClient.limitedParseFloat32,
        StartedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        State: smithyClient.expectString,
        VersionLabel: smithyClient.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _AI = "ApplicationId";
const _AR = "AllowRevert";
const _CCV = "ClientConfigurationVersion";
const _CI = "ClientId";
const _CPI = "ConfigurationProfileId";
const _CT = "ContentType";
const _CV = "ConfigurationVersion";
const _D = "Description";
const _DPC = "DeletionProtectionCheck";
const _EI = "ExtensionIdentifier";
const _EVN = "ExtensionVersionNumber";
const _KKA = "KmsKeyArn";
const _LVN = "LatestVersionNumber";
const _MR = "MaxResults";
const _N = "Name";
const _NT = "NextToken";
const _RI = "ResourceIdentifier";
const _T = "Type";
const _TK = "TagKeys";
const _VL = "VersionLabel";
const _VN = "VersionNumber";
const _ai = "application-id";
const _ar = "allow-revert";
const _ccv = "client_configuration_version";
const _ci = "client_id";
const _cpi = "configuration-profile-id";
const _ct = "content-type";
const _cv = "configuration_version";
const _cv_ = "configuration-version";
const _d = "description";
const _ei = "extension_identifier";
const _evn = "extension_version_number";
const _k = "kmskeyarn";
const _lvn = "latest-version-number";
const _mr = "max_results";
const _n = "name";
const _nt = "next_token";
const _ri = "resource_identifier";
const _t = "type";
const _tK = "tagKeys";
const _v = "versionlabel";
const _ve = "version";
const _vl = "version_label";
const _vn = "version_number";
const _vn_ = "version-number";
const _xadpc = "x-amzn-deletion-protection-check";

class CreateApplicationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "CreateApplication", {})
    .n("AppConfigClient", "CreateApplicationCommand")
    .f(void 0, void 0)
    .ser(se_CreateApplicationCommand)
    .de(de_CreateApplicationCommand)
    .build() {
}

class CreateConfigurationProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "CreateConfigurationProfile", {})
    .n("AppConfigClient", "CreateConfigurationProfileCommand")
    .f(CreateConfigurationProfileRequestFilterSensitiveLog, ConfigurationProfileFilterSensitiveLog)
    .ser(se_CreateConfigurationProfileCommand)
    .de(de_CreateConfigurationProfileCommand)
    .build() {
}

class CreateDeploymentStrategyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "CreateDeploymentStrategy", {})
    .n("AppConfigClient", "CreateDeploymentStrategyCommand")
    .f(void 0, void 0)
    .ser(se_CreateDeploymentStrategyCommand)
    .de(de_CreateDeploymentStrategyCommand)
    .build() {
}

class CreateEnvironmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "CreateEnvironment", {})
    .n("AppConfigClient", "CreateEnvironmentCommand")
    .f(void 0, void 0)
    .ser(se_CreateEnvironmentCommand)
    .de(de_CreateEnvironmentCommand)
    .build() {
}

class CreateExtensionAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "CreateExtensionAssociation", {})
    .n("AppConfigClient", "CreateExtensionAssociationCommand")
    .f(void 0, void 0)
    .ser(se_CreateExtensionAssociationCommand)
    .de(de_CreateExtensionAssociationCommand)
    .build() {
}

class CreateExtensionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "CreateExtension", {})
    .n("AppConfigClient", "CreateExtensionCommand")
    .f(void 0, void 0)
    .ser(se_CreateExtensionCommand)
    .de(de_CreateExtensionCommand)
    .build() {
}

class CreateHostedConfigurationVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "CreateHostedConfigurationVersion", {})
    .n("AppConfigClient", "CreateHostedConfigurationVersionCommand")
    .f(CreateHostedConfigurationVersionRequestFilterSensitiveLog, HostedConfigurationVersionFilterSensitiveLog)
    .ser(se_CreateHostedConfigurationVersionCommand)
    .de(de_CreateHostedConfigurationVersionCommand)
    .build() {
}

class DeleteApplicationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "DeleteApplication", {})
    .n("AppConfigClient", "DeleteApplicationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteApplicationCommand)
    .de(de_DeleteApplicationCommand)
    .build() {
}

class DeleteConfigurationProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "DeleteConfigurationProfile", {})
    .n("AppConfigClient", "DeleteConfigurationProfileCommand")
    .f(void 0, void 0)
    .ser(se_DeleteConfigurationProfileCommand)
    .de(de_DeleteConfigurationProfileCommand)
    .build() {
}

class DeleteDeploymentStrategyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "DeleteDeploymentStrategy", {})
    .n("AppConfigClient", "DeleteDeploymentStrategyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDeploymentStrategyCommand)
    .de(de_DeleteDeploymentStrategyCommand)
    .build() {
}

class DeleteEnvironmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "DeleteEnvironment", {})
    .n("AppConfigClient", "DeleteEnvironmentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEnvironmentCommand)
    .de(de_DeleteEnvironmentCommand)
    .build() {
}

class DeleteExtensionAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "DeleteExtensionAssociation", {})
    .n("AppConfigClient", "DeleteExtensionAssociationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteExtensionAssociationCommand)
    .de(de_DeleteExtensionAssociationCommand)
    .build() {
}

class DeleteExtensionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "DeleteExtension", {})
    .n("AppConfigClient", "DeleteExtensionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteExtensionCommand)
    .de(de_DeleteExtensionCommand)
    .build() {
}

class DeleteHostedConfigurationVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "DeleteHostedConfigurationVersion", {})
    .n("AppConfigClient", "DeleteHostedConfigurationVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteHostedConfigurationVersionCommand)
    .de(de_DeleteHostedConfigurationVersionCommand)
    .build() {
}

class GetAccountSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetAccountSettings", {})
    .n("AppConfigClient", "GetAccountSettingsCommand")
    .f(void 0, void 0)
    .ser(se_GetAccountSettingsCommand)
    .de(de_GetAccountSettingsCommand)
    .build() {
}

class GetApplicationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetApplication", {})
    .n("AppConfigClient", "GetApplicationCommand")
    .f(void 0, void 0)
    .ser(se_GetApplicationCommand)
    .de(de_GetApplicationCommand)
    .build() {
}

class GetConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetConfiguration", {})
    .n("AppConfigClient", "GetConfigurationCommand")
    .f(void 0, ConfigurationFilterSensitiveLog)
    .ser(se_GetConfigurationCommand)
    .de(de_GetConfigurationCommand)
    .build() {
}

class GetConfigurationProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetConfigurationProfile", {})
    .n("AppConfigClient", "GetConfigurationProfileCommand")
    .f(void 0, ConfigurationProfileFilterSensitiveLog)
    .ser(se_GetConfigurationProfileCommand)
    .de(de_GetConfigurationProfileCommand)
    .build() {
}

class GetDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetDeployment", {})
    .n("AppConfigClient", "GetDeploymentCommand")
    .f(void 0, void 0)
    .ser(se_GetDeploymentCommand)
    .de(de_GetDeploymentCommand)
    .build() {
}

class GetDeploymentStrategyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetDeploymentStrategy", {})
    .n("AppConfigClient", "GetDeploymentStrategyCommand")
    .f(void 0, void 0)
    .ser(se_GetDeploymentStrategyCommand)
    .de(de_GetDeploymentStrategyCommand)
    .build() {
}

class GetEnvironmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetEnvironment", {})
    .n("AppConfigClient", "GetEnvironmentCommand")
    .f(void 0, void 0)
    .ser(se_GetEnvironmentCommand)
    .de(de_GetEnvironmentCommand)
    .build() {
}

class GetExtensionAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetExtensionAssociation", {})
    .n("AppConfigClient", "GetExtensionAssociationCommand")
    .f(void 0, void 0)
    .ser(se_GetExtensionAssociationCommand)
    .de(de_GetExtensionAssociationCommand)
    .build() {
}

class GetExtensionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetExtension", {})
    .n("AppConfigClient", "GetExtensionCommand")
    .f(void 0, void 0)
    .ser(se_GetExtensionCommand)
    .de(de_GetExtensionCommand)
    .build() {
}

class GetHostedConfigurationVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "GetHostedConfigurationVersion", {})
    .n("AppConfigClient", "GetHostedConfigurationVersionCommand")
    .f(void 0, HostedConfigurationVersionFilterSensitiveLog)
    .ser(se_GetHostedConfigurationVersionCommand)
    .de(de_GetHostedConfigurationVersionCommand)
    .build() {
}

class ListApplicationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ListApplications", {})
    .n("AppConfigClient", "ListApplicationsCommand")
    .f(void 0, void 0)
    .ser(se_ListApplicationsCommand)
    .de(de_ListApplicationsCommand)
    .build() {
}

class ListConfigurationProfilesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ListConfigurationProfiles", {})
    .n("AppConfigClient", "ListConfigurationProfilesCommand")
    .f(void 0, void 0)
    .ser(se_ListConfigurationProfilesCommand)
    .de(de_ListConfigurationProfilesCommand)
    .build() {
}

class ListDeploymentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ListDeployments", {})
    .n("AppConfigClient", "ListDeploymentsCommand")
    .f(void 0, void 0)
    .ser(se_ListDeploymentsCommand)
    .de(de_ListDeploymentsCommand)
    .build() {
}

class ListDeploymentStrategiesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ListDeploymentStrategies", {})
    .n("AppConfigClient", "ListDeploymentStrategiesCommand")
    .f(void 0, void 0)
    .ser(se_ListDeploymentStrategiesCommand)
    .de(de_ListDeploymentStrategiesCommand)
    .build() {
}

class ListEnvironmentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ListEnvironments", {})
    .n("AppConfigClient", "ListEnvironmentsCommand")
    .f(void 0, void 0)
    .ser(se_ListEnvironmentsCommand)
    .de(de_ListEnvironmentsCommand)
    .build() {
}

class ListExtensionAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ListExtensionAssociations", {})
    .n("AppConfigClient", "ListExtensionAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_ListExtensionAssociationsCommand)
    .de(de_ListExtensionAssociationsCommand)
    .build() {
}

class ListExtensionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ListExtensions", {})
    .n("AppConfigClient", "ListExtensionsCommand")
    .f(void 0, void 0)
    .ser(se_ListExtensionsCommand)
    .de(de_ListExtensionsCommand)
    .build() {
}

class ListHostedConfigurationVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ListHostedConfigurationVersions", {})
    .n("AppConfigClient", "ListHostedConfigurationVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListHostedConfigurationVersionsCommand)
    .de(de_ListHostedConfigurationVersionsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ListTagsForResource", {})
    .n("AppConfigClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class StartDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "StartDeployment", {})
    .n("AppConfigClient", "StartDeploymentCommand")
    .f(StartDeploymentRequestFilterSensitiveLog, void 0)
    .ser(se_StartDeploymentCommand)
    .de(de_StartDeploymentCommand)
    .build() {
}

class StopDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "StopDeployment", {})
    .n("AppConfigClient", "StopDeploymentCommand")
    .f(void 0, void 0)
    .ser(se_StopDeploymentCommand)
    .de(de_StopDeploymentCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "TagResource", {})
    .n("AppConfigClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "UntagResource", {})
    .n("AppConfigClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateAccountSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "UpdateAccountSettings", {})
    .n("AppConfigClient", "UpdateAccountSettingsCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAccountSettingsCommand)
    .de(de_UpdateAccountSettingsCommand)
    .build() {
}

class UpdateApplicationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "UpdateApplication", {})
    .n("AppConfigClient", "UpdateApplicationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateApplicationCommand)
    .de(de_UpdateApplicationCommand)
    .build() {
}

class UpdateConfigurationProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "UpdateConfigurationProfile", {})
    .n("AppConfigClient", "UpdateConfigurationProfileCommand")
    .f(UpdateConfigurationProfileRequestFilterSensitiveLog, ConfigurationProfileFilterSensitiveLog)
    .ser(se_UpdateConfigurationProfileCommand)
    .de(de_UpdateConfigurationProfileCommand)
    .build() {
}

class UpdateDeploymentStrategyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "UpdateDeploymentStrategy", {})
    .n("AppConfigClient", "UpdateDeploymentStrategyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDeploymentStrategyCommand)
    .de(de_UpdateDeploymentStrategyCommand)
    .build() {
}

class UpdateEnvironmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "UpdateEnvironment", {})
    .n("AppConfigClient", "UpdateEnvironmentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateEnvironmentCommand)
    .de(de_UpdateEnvironmentCommand)
    .build() {
}

class UpdateExtensionAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "UpdateExtensionAssociation", {})
    .n("AppConfigClient", "UpdateExtensionAssociationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateExtensionAssociationCommand)
    .de(de_UpdateExtensionAssociationCommand)
    .build() {
}

class UpdateExtensionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "UpdateExtension", {})
    .n("AppConfigClient", "UpdateExtensionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateExtensionCommand)
    .de(de_UpdateExtensionCommand)
    .build() {
}

class ValidateConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonAppConfig", "ValidateConfiguration", {})
    .n("AppConfigClient", "ValidateConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_ValidateConfigurationCommand)
    .de(de_ValidateConfigurationCommand)
    .build() {
}

const commands = {
    CreateApplicationCommand,
    CreateConfigurationProfileCommand,
    CreateDeploymentStrategyCommand,
    CreateEnvironmentCommand,
    CreateExtensionCommand,
    CreateExtensionAssociationCommand,
    CreateHostedConfigurationVersionCommand,
    DeleteApplicationCommand,
    DeleteConfigurationProfileCommand,
    DeleteDeploymentStrategyCommand,
    DeleteEnvironmentCommand,
    DeleteExtensionCommand,
    DeleteExtensionAssociationCommand,
    DeleteHostedConfigurationVersionCommand,
    GetAccountSettingsCommand,
    GetApplicationCommand,
    GetConfigurationCommand,
    GetConfigurationProfileCommand,
    GetDeploymentCommand,
    GetDeploymentStrategyCommand,
    GetEnvironmentCommand,
    GetExtensionCommand,
    GetExtensionAssociationCommand,
    GetHostedConfigurationVersionCommand,
    ListApplicationsCommand,
    ListConfigurationProfilesCommand,
    ListDeploymentsCommand,
    ListDeploymentStrategiesCommand,
    ListEnvironmentsCommand,
    ListExtensionAssociationsCommand,
    ListExtensionsCommand,
    ListHostedConfigurationVersionsCommand,
    ListTagsForResourceCommand,
    StartDeploymentCommand,
    StopDeploymentCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateAccountSettingsCommand,
    UpdateApplicationCommand,
    UpdateConfigurationProfileCommand,
    UpdateDeploymentStrategyCommand,
    UpdateEnvironmentCommand,
    UpdateExtensionCommand,
    UpdateExtensionAssociationCommand,
    ValidateConfigurationCommand,
};
class AppConfig extends AppConfigClient {
}
smithyClient.createAggregatedClient(commands, AppConfig);

const paginateListApplications = core.createPaginator(AppConfigClient, ListApplicationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListConfigurationProfiles = core.createPaginator(AppConfigClient, ListConfigurationProfilesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDeploymentStrategies = core.createPaginator(AppConfigClient, ListDeploymentStrategiesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDeployments = core.createPaginator(AppConfigClient, ListDeploymentsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListEnvironments = core.createPaginator(AppConfigClient, ListEnvironmentsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListExtensionAssociations = core.createPaginator(AppConfigClient, ListExtensionAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListExtensions = core.createPaginator(AppConfigClient, ListExtensionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListHostedConfigurationVersions = core.createPaginator(AppConfigClient, ListHostedConfigurationVersionsCommand, "NextToken", "NextToken", "MaxResults");

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetDeploymentCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.State;
            };
            if (returnComparator() === "COMPLETE") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.State;
            };
            if (returnComparator() === "ROLLED_BACK") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.State;
            };
            if (returnComparator() === "REVERTED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForDeploymentComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilDeploymentComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetEnvironmentCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.State;
            };
            if (returnComparator() === "ReadyForDeployment") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.State;
            };
            if (returnComparator() === "RolledBack") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.State;
            };
            if (returnComparator() === "Reverted") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForEnvironmentReadyForDeployment = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilEnvironmentReadyForDeployment = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.ActionPoint = ActionPoint;
exports.AppConfig = AppConfig;
exports.AppConfigClient = AppConfigClient;
exports.AppConfigServiceException = AppConfigServiceException;
exports.BadRequestException = BadRequestException;
exports.BadRequestReason = BadRequestReason;
exports.BytesMeasure = BytesMeasure;
exports.ConfigurationFilterSensitiveLog = ConfigurationFilterSensitiveLog;
exports.ConfigurationProfileFilterSensitiveLog = ConfigurationProfileFilterSensitiveLog;
exports.ConflictException = ConflictException;
exports.CreateApplicationCommand = CreateApplicationCommand;
exports.CreateConfigurationProfileCommand = CreateConfigurationProfileCommand;
exports.CreateConfigurationProfileRequestFilterSensitiveLog = CreateConfigurationProfileRequestFilterSensitiveLog;
exports.CreateDeploymentStrategyCommand = CreateDeploymentStrategyCommand;
exports.CreateEnvironmentCommand = CreateEnvironmentCommand;
exports.CreateExtensionAssociationCommand = CreateExtensionAssociationCommand;
exports.CreateExtensionCommand = CreateExtensionCommand;
exports.CreateHostedConfigurationVersionCommand = CreateHostedConfigurationVersionCommand;
exports.CreateHostedConfigurationVersionRequestFilterSensitiveLog = CreateHostedConfigurationVersionRequestFilterSensitiveLog;
exports.DeleteApplicationCommand = DeleteApplicationCommand;
exports.DeleteConfigurationProfileCommand = DeleteConfigurationProfileCommand;
exports.DeleteDeploymentStrategyCommand = DeleteDeploymentStrategyCommand;
exports.DeleteEnvironmentCommand = DeleteEnvironmentCommand;
exports.DeleteExtensionAssociationCommand = DeleteExtensionAssociationCommand;
exports.DeleteExtensionCommand = DeleteExtensionCommand;
exports.DeleteHostedConfigurationVersionCommand = DeleteHostedConfigurationVersionCommand;
exports.DeletionProtectionCheck = DeletionProtectionCheck;
exports.DeploymentEventType = DeploymentEventType;
exports.DeploymentState = DeploymentState;
exports.EnvironmentState = EnvironmentState;
exports.GetAccountSettingsCommand = GetAccountSettingsCommand;
exports.GetApplicationCommand = GetApplicationCommand;
exports.GetConfigurationCommand = GetConfigurationCommand;
exports.GetConfigurationProfileCommand = GetConfigurationProfileCommand;
exports.GetDeploymentCommand = GetDeploymentCommand;
exports.GetDeploymentStrategyCommand = GetDeploymentStrategyCommand;
exports.GetEnvironmentCommand = GetEnvironmentCommand;
exports.GetExtensionAssociationCommand = GetExtensionAssociationCommand;
exports.GetExtensionCommand = GetExtensionCommand;
exports.GetHostedConfigurationVersionCommand = GetHostedConfigurationVersionCommand;
exports.GrowthType = GrowthType;
exports.HostedConfigurationVersionFilterSensitiveLog = HostedConfigurationVersionFilterSensitiveLog;
exports.InternalServerException = InternalServerException;
exports.ListApplicationsCommand = ListApplicationsCommand;
exports.ListConfigurationProfilesCommand = ListConfigurationProfilesCommand;
exports.ListDeploymentStrategiesCommand = ListDeploymentStrategiesCommand;
exports.ListDeploymentsCommand = ListDeploymentsCommand;
exports.ListEnvironmentsCommand = ListEnvironmentsCommand;
exports.ListExtensionAssociationsCommand = ListExtensionAssociationsCommand;
exports.ListExtensionsCommand = ListExtensionsCommand;
exports.ListHostedConfigurationVersionsCommand = ListHostedConfigurationVersionsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.PayloadTooLargeException = PayloadTooLargeException;
exports.ReplicateTo = ReplicateTo;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.StartDeploymentCommand = StartDeploymentCommand;
exports.StartDeploymentRequestFilterSensitiveLog = StartDeploymentRequestFilterSensitiveLog;
exports.StopDeploymentCommand = StopDeploymentCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TriggeredBy = TriggeredBy;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateAccountSettingsCommand = UpdateAccountSettingsCommand;
exports.UpdateApplicationCommand = UpdateApplicationCommand;
exports.UpdateConfigurationProfileCommand = UpdateConfigurationProfileCommand;
exports.UpdateConfigurationProfileRequestFilterSensitiveLog = UpdateConfigurationProfileRequestFilterSensitiveLog;
exports.UpdateDeploymentStrategyCommand = UpdateDeploymentStrategyCommand;
exports.UpdateEnvironmentCommand = UpdateEnvironmentCommand;
exports.UpdateExtensionAssociationCommand = UpdateExtensionAssociationCommand;
exports.UpdateExtensionCommand = UpdateExtensionCommand;
exports.ValidateConfigurationCommand = ValidateConfigurationCommand;
exports.ValidatorFilterSensitiveLog = ValidatorFilterSensitiveLog;
exports.ValidatorType = ValidatorType;
exports.paginateListApplications = paginateListApplications;
exports.paginateListConfigurationProfiles = paginateListConfigurationProfiles;
exports.paginateListDeploymentStrategies = paginateListDeploymentStrategies;
exports.paginateListDeployments = paginateListDeployments;
exports.paginateListEnvironments = paginateListEnvironments;
exports.paginateListExtensionAssociations = paginateListExtensionAssociations;
exports.paginateListExtensions = paginateListExtensions;
exports.paginateListHostedConfigurationVersions = paginateListHostedConfigurationVersions;
exports.waitForDeploymentComplete = waitForDeploymentComplete;
exports.waitForEnvironmentReadyForDeployment = waitForEnvironmentReadyForDeployment;
exports.waitUntilDeploymentComplete = waitUntilDeploymentComplete;
exports.waitUntilEnvironmentReadyForDeployment = waitUntilEnvironmentReadyForDeployment;
