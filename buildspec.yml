version: 0.2

env:
  variables:
    NODE_ENV: test
    NEXT_PUBLIC_URL: https://test.huntaze.com
    # Database will be set in pre_build phase
  # Secrets can be injected via CodeBuild environment variables
  # STRIPE_SECRET_KEY will be fetched from Secrets Manager if not provided

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - echo "=== Install Phase ==="
      - echo "Installing system dependencies"
      # Install jq for JSON parsing (works on both yum and apt-get systems)
      - |
        if command -v yum >/dev/null; then
          yum -y install jq || true
        elif command -v apt-get >/dev/null; then
          apt-get update && apt-get -y install jq || true
        fi
      - echo "Installing npm dependencies"
      - npm ci
      - echo "Dependencies installed successfully"

  pre_build:
    commands:
      - echo "=== Pre-build Phase: Setup Services and Secrets ==="
      
      # Fetch Stripe secret from AWS Secrets Manager if not provided via environment
      - |
        if [ -z "$STRIPE_SECRET_KEY" ]; then
          echo "Fetching STRIPE_SECRET_KEY from AWS Secrets Manager"
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id huntaze/stripe-secrets --query SecretString --output text)
          export STRIPE_SECRET_KEY=$(echo "$SECRET_JSON" | jq -r .STRIPE_SECRET_KEY)
          export STRIPE_PRO_MONTHLY_PRICE_ID=$(echo "$SECRET_JSON" | jq -r .STRIPE_PRO_MONTHLY_PRICE_ID)
          export STRIPE_PRO_YEARLY_PRICE_ID=$(echo "$SECRET_JSON" | jq -r .STRIPE_PRO_YEARLY_PRICE_ID)
          export STRIPE_ENTERPRISE_MONTHLY_PRICE_ID=$(echo "$SECRET_JSON" | jq -r .STRIPE_ENTERPRISE_MONTHLY_PRICE_ID)
          export STRIPE_ENTERPRISE_YEARLY_PRICE_ID=$(echo "$SECRET_JSON" | jq -r .STRIPE_ENTERPRISE_YEARLY_PRICE_ID)
          echo "Stripe secrets loaded successfully"
        else
          echo "Using STRIPE_SECRET_KEY from environment variables"
        fi
      
      # Setup test database URL
      - export DATABASE_URL="postgresql://postgres:postgres@127.0.0.1:5432/huntaze_test"
      
      # Create Docker network for test services
      - echo "Creating Docker network for test services"
      - docker network create test-network || true
      
      # Start PostgreSQL test database
      - echo "Starting PostgreSQL test database"
      - |
        docker run -d \
          --name test-postgres \
          --network test-network \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=huntaze_test \
          -e POSTGRES_USER=postgres \
          -p 5432:5432 \
          postgres:15-alpine
      
      # Start Stripe Mock server for testing
      - echo "Starting Stripe Mock server"
      - |
        docker run -d \
          --name stripe-mock \
          --network test-network \
          -p 12111:12111 \
          stripe/stripe-mock:0.108.0
      
      # Wait for services to be ready
      - echo "Waiting for services to be ready..."
      - sleep 10
      
      # Verify PostgreSQL is ready
      - |
        for i in {1..30}; do
          if docker exec test-postgres pg_isready -U postgres; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done
      
      # Verify Stripe Mock is ready
      - |
        for i in {1..15}; do
          if curl -f http://localhost:12111/v1/charges > /dev/null 2>&1; then
            echo "Stripe Mock is ready"
            break
          fi
          echo "Waiting for Stripe Mock... ($i/15)"
          sleep 2
        done
      
      # Run database migrations if they exist
      - |
        if [ -f "prisma/schema.prisma" ]; then
          echo "Running database migrations"
          npx prisma migrate deploy || npx prisma db push
        fi

  build:
    commands:
      - echo "=== Build Phase: TypeScript Check and Tests ==="
      
      # TypeScript type checking
      - echo "Running TypeScript type check"
      - npm run type-check || npx tsc --noEmit
      
      # Create reports directory
      - mkdir -p reports coverage
      
      # Run simple services tests with coverage
      - echo "Running Simple Services Tests"
      - |
        npm run test -- \
          --config vitest.simple-services.config.ts \
          --coverage \
          --reporter=verbose \
          --reporter=junit \
          --outputFile.junit=reports/simple-services-junit.xml \
          tests/unit/simple-user-service.test.ts \
          tests/unit/simple-billing-service-complete.test.ts \
          tests/integration/user-billing-integration.test.ts \
          tests/unit/simple-services-validation.test.ts
      
      # Run additional unit tests if they exist
      - echo "Running additional unit tests"
      - |
        if ls tests/unit/*.test.ts 1> /dev/null 2>&1; then
          npm run test -- \
            --reporter=junit \
            --outputFile.junit=reports/unit-tests-junit.xml \
            tests/unit/ || true
        fi
      
      # Run integration tests
      - echo "Running integration tests"
      - |
        if ls tests/integration/*.test.ts 1> /dev/null 2>&1; then
          npm run test -- \
            --reporter=junit \
            --outputFile.junit=reports/integration-tests-junit.xml \
            tests/integration/ || true
        fi
      
      # Check coverage thresholds
      - echo "Checking coverage thresholds"
      - node scripts/check-coverage.js || true
      
      # Generate test summary
      - echo "Generating test summary"
      - |
        echo "=== Test Execution Summary ===" > reports/test-summary.txt
        echo "Timestamp: $(date)" >> reports/test-summary.txt
        echo "Node Version: $(node --version)" >> reports/test-summary.txt
        echo "NPM Version: $(npm --version)" >> reports/test-summary.txt
        echo "Environment: $NODE_ENV" >> reports/test-summary.txt
        echo "Database URL: $DATABASE_URL" >> reports/test-summary.txt
        echo "Tests completed successfully" >> reports/test-summary.txt

  post_build:
    commands:
      - echo "=== Post-build Phase: Cleanup and Artifacts ==="
      
      # Stop and remove test containers
      - echo "Cleaning up test containers"
      - docker stop test-postgres stripe-mock || true
      - docker rm test-postgres stripe-mock || true
      - docker network rm test-network || true
      
      # Generate final coverage report
      - |
        if [ -d "coverage" ]; then
          echo "Coverage report generated in coverage/ directory"
          ls -la coverage/
        fi
      
      # List all generated reports
      - echo "Generated reports:"
      - ls -la reports/ || true
      
      - echo "Build completed successfully"

artifacts:
  files:
    - reports/**/*
    - coverage/**/*
    - test-results/**/*
  discard-paths: no
  name: huntaze-simple-services-test-artifacts

reports:
  simple-services-tests:
    files:
      - reports/simple-services-junit.xml
    base-directory: reports
    file-format: JUNITXML
  
  unit-tests:
    files:
      - reports/unit-tests-junit.xml
    base-directory: reports
    file-format: JUNITXML
  
  integration-tests:
    files:
      - reports/integration-tests-junit.xml
    base-directory: reports
    file-format: JUNITXML

cache:
  paths:
    - node_modules/**/*
    - .npm/**/*