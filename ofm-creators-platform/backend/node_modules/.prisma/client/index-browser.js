
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CreatorScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  displayName: 'displayName',
  bio: 'bio',
  avatar: 'avatar',
  stripeAccountId: 'stripeAccountId',
  stripeCustomerId: 'stripeCustomerId',
  stripeConnected: 'stripeConnected',
  kycStatus: 'kycStatus',
  commissionTier: 'commissionTier',
  totalRevenue: 'totalRevenue',
  availableBalance: 'availableBalance',
  currency: 'currency',
  locale: 'locale',
  timezone: 'timezone',
  onboardingCompleted: 'onboardingCompleted',
  emailVerified: 'emailVerified',
  twoFactorEnabled: 'twoFactorEnabled',
  phoneNumber: 'phoneNumber',
  smsOptIn: 'smsOptIn',
  currentPlan: 'currentPlan',
  accountStatus: 'accountStatus',
  planDowngradedAt: 'planDowngradedAt',
  planDowngradeReason: 'planDowngradeReason',
  suspendedAt: 'suspendedAt',
  suspensionReason: 'suspensionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreatorSettingsScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  pushNotifications: 'pushNotifications',
  showPublicProfile: 'showPublicProfile',
  allowDMs: 'allowDMs',
  minPayout: 'minPayout',
  payoutFrequency: 'payoutFrequency',
  taxFormSubmitted: 'taxFormSubmitted',
  w9Submitted: 'w9Submitted',
  defaultContentAccess: 'defaultContentAccess',
  watermarkContent: 'watermarkContent',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  interval: 'interval',
  intervalCount: 'intervalCount',
  features: 'features',
  maxDownloads: 'maxDownloads',
  earlyAccess: 'earlyAccess',
  exclusiveContent: 'exclusiveContent',
  trialPeriodDays: 'trialPeriodDays',
  stripePriceId: 'stripePriceId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  type: 'type',
  title: 'title',
  description: 'description',
  price: 'price',
  currency: 'currency',
  contentUrl: 'contentUrl',
  thumbnailUrl: 'thumbnailUrl',
  previewUrl: 'previewUrl',
  accessType: 'accessType',
  requiresSubscription: 'requiresSubscription',
  tags: 'tags',
  isPublished: 'isPublished',
  publishedAt: 'publishedAt',
  viewCount: 'viewCount',
  purchaseCount: 'purchaseCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FanScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  displayName: 'displayName',
  avatar: 'avatar',
  stripeCustomerId: 'stripeCustomerId',
  emailVerified: 'emailVerified',
  phoneNumber: 'phoneNumber',
  phoneVerified: 'phoneVerified',
  locale: 'locale',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  fanId: 'fanId',
  creatorId: 'creatorId',
  planId: 'planId',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  canceledAt: 'canceledAt',
  endedAt: 'endedAt',
  stripeSubscriptionId: 'stripeSubscriptionId',
  totalSpent: 'totalSpent',
  renewalCount: 'renewalCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  fanId: 'fanId',
  productId: 'productId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  stripePaymentIntentId: 'stripePaymentIntentId',
  downloadCount: 'downloadCount',
  lastDownloadAt: 'lastDownloadAt',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  fanId: 'fanId',
  type: 'type',
  amount: 'amount',
  currency: 'currency',
  platformFee: 'platformFee',
  platformFeeRate: 'platformFeeRate',
  netAmount: 'netAmount',
  status: 'status',
  subscriptionId: 'subscriptionId',
  purchaseId: 'purchaseId',
  payoutId: 'payoutId',
  stripeTransferId: 'stripeTransferId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.PayoutScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  method: 'method',
  destination: 'destination',
  stripePayoutId: 'stripePayoutId',
  processedAt: 'processedAt',
  failureReason: 'failureReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  date: 'date',
  revenue: 'revenue',
  subscriptionRevenue: 'subscriptionRevenue',
  productRevenue: 'productRevenue',
  newSubscribers: 'newSubscribers',
  churned: 'churned',
  activeSubscribers: 'activeSubscribers',
  pageViews: 'pageViews',
  uniqueVisitors: 'uniqueVisitors',
  contentViews: 'contentViews',
  conversionRate: 'conversionRate',
  avgOrderValue: 'avgOrderValue',
  createdAt: 'createdAt'
};

exports.Prisma.FanRelationScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  fanId: 'fanId',
  tags: 'tags',
  notes: 'notes',
  engagementScore: 'engagementScore',
  lifetimeValue: 'lifetimeValue',
  lastInteraction: 'lastInteraction',
  emailOptIn: 'emailOptIn',
  smsOptIn: 'smsOptIn',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  name: 'name',
  type: 'type',
  status: 'status',
  subject: 'subject',
  content: 'content',
  targetTags: 'targetTags',
  targetSegment: 'targetSegment',
  scheduledFor: 'scheduledFor',
  sentAt: 'sentAt',
  sentCount: 'sentCount',
  openCount: 'openCount',
  clickCount: 'clickCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignRecipientScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  fanId: 'fanId',
  status: 'status',
  sentAt: 'sentAt',
  openedAt: 'openedAt',
  clickedAt: 'clickedAt'
};

exports.Prisma.AppScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  icon: 'icon',
  developer: 'developer',
  website: 'website',
  category: 'category',
  pricing: 'pricing',
  price: 'price',
  webhookUrl: 'webhookUrl',
  scopes: 'scopes',
  isPublished: 'isPublished',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InstalledAppScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  appId: 'appId',
  status: 'status',
  settings: 'settings',
  billingCycle: 'billingCycle',
  nextBilling: 'nextBilling',
  installedAt: 'installedAt',
  uninstalledAt: 'uninstalledAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  actorId: 'actorId',
  actorType: 'actorType',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.LedgerAccountScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  type: 'type',
  currency: 'currency',
  ownerId: 'ownerId',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LedgerTransactionScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  kind: 'kind',
  currency: 'currency',
  occurredAt: 'occurredAt',
  memo: 'memo',
  source: 'source',
  extRef: 'extRef',
  stripeEventId: 'stripeEventId',
  idempotencyKey: 'idempotencyKey',
  reversedBy: 'reversedBy',
  createdAt: 'createdAt'
};

exports.Prisma.LedgerEntryScalarFieldEnum = {
  id: 'id',
  txId: 'txId',
  accountId: 'accountId',
  direction: 'direction',
  amountCents: 'amountCents',
  currency: 'currency',
  createdAt: 'createdAt'
};

exports.Prisma.CommissionCapMonthlyScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  yearMonth: 'yearMonth',
  currency: 'currency',
  capCents: 'capCents',
  appliedCents: 'appliedCents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExternalEarningsSourceScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  platform: 'platform',
  externalHandle: 'externalHandle',
  currency: 'currency',
  connectedAt: 'connectedAt',
  active: 'active',
  lastSync: 'lastSync',
  metadata: 'metadata'
};

exports.Prisma.ExternalEarningsImportScalarFieldEnum = {
  id: 'id',
  sourceId: 'sourceId',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  rawHash: 'rawHash',
  rawJson: 'rawJson',
  processedAt: 'processedAt',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.NormalizedEarningScalarFieldEnum = {
  id: 'id',
  sourceId: 'sourceId',
  occurredAt: 'occurredAt',
  currency: 'currency',
  grossCents: 'grossCents',
  feesCents: 'feesCents',
  netCents: 'netCents',
  payoutId: 'payoutId',
  extRef: 'extRef',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.CommissionStatementScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  platform: 'platform',
  yearMonth: 'yearMonth',
  currency: 'currency',
  baseNetCents: 'baseNetCents',
  rateBps: 'rateBps',
  commissionCents: 'commissionCents',
  capAppliedCents: 'capAppliedCents',
  finalCents: 'finalCents',
  closedAt: 'closedAt',
  invoicedAt: 'invoicedAt',
  stripeInvoiceId: 'stripeInvoiceId',
  paidAt: 'paidAt',
  writeOffAt: 'writeOffAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DunningStateScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  creatorId: 'creatorId',
  attemptCount: 'attemptCount',
  status: 'status',
  lastAttempt: 'lastAttempt',
  nextAttempt: 'nextAttempt',
  recoveredAt: 'recoveredAt',
  writeOffAt: 'writeOffAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentAttemptScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  attemptNumber: 'attemptNumber',
  status: 'status',
  errorCode: 'errorCode',
  errorMessage: 'errorMessage',
  paymentMethodId: 'paymentMethodId',
  amount: 'amount',
  currency: 'currency',
  createdAt: 'createdAt'
};

exports.Prisma.AutomationScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  name: 'name',
  triggerType: 'triggerType',
  conditions: 'conditions',
  actions: 'actions',
  status: 'status',
  lastRun: 'lastRun',
  runCount: 'runCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BackupLogScalarFieldEnum = {
  id: 'id',
  status: 'status',
  duration: 'duration',
  error: 'error',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.BackupValidationScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  results: 'results',
  summary: 'summary',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.BackupIndexScalarFieldEnum = {
  id: 'id',
  backupId: 'backupId',
  timestamp: 'timestamp',
  metadata: 'metadata',
  tables: 'tables',
  createdAt: 'createdAt'
};

exports.Prisma.AIUsageLogScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  model: 'model',
  purpose: 'purpose',
  userId: 'userId',
  promptTokens: 'promptTokens',
  completionTokens: 'completionTokens',
  totalTokens: 'totalTokens',
  cost: 'cost',
  cached: 'cached',
  timestamp: 'timestamp'
};

exports.Prisma.CostReservationScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  service: 'service',
  commitment: 'commitment',
  units: 'units',
  unitPrice: 'unitPrice',
  savings: 'savings',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromptOptimizationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  originalPrompt: 'originalPrompt',
  optimizedPrompt: 'optimizedPrompt',
  originalTokens: 'originalTokens',
  optimizedTokens: 'optimizedTokens',
  tokenReduction: 'tokenReduction',
  qualityScore: 'qualityScore',
  abTestResults: 'abTestResults',
  timestamp: 'timestamp'
};

exports.Prisma.CostAlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  service: 'service',
  threshold: 'threshold',
  current: 'current',
  message: 'message',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.KycStatus = exports.$Enums.KycStatus = {
  PENDING: 'PENDING',
  IN_REVIEW: 'IN_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.CommissionTier = exports.$Enums.CommissionTier = {
  STARTER: 'STARTER',
  PRO: 'PRO',
  SCALE: 'SCALE',
  ENTERPRISE: 'ENTERPRISE'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  CLOSED: 'CLOSED'
};

exports.PayoutFrequency = exports.$Enums.PayoutFrequency = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  BIWEEKLY: 'BIWEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.ContentAccess = exports.$Enums.ContentAccess = {
  FREE: 'FREE',
  SUBSCRIPTION: 'SUBSCRIPTION',
  PAY_PER_VIEW: 'PAY_PER_VIEW',
  MIXED: 'MIXED'
};

exports.BillingInterval = exports.$Enums.BillingInterval = {
  DAY: 'DAY',
  WEEK: 'WEEK',
  MONTH: 'MONTH',
  YEAR: 'YEAR'
};

exports.ProductType = exports.$Enums.ProductType = {
  POST: 'POST',
  VIDEO: 'VIDEO',
  IMAGE_SET: 'IMAGE_SET',
  BUNDLE: 'BUNDLE',
  LIVE_STREAM: 'LIVE_STREAM',
  MESSAGE: 'MESSAGE'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  INCOMPLETE: 'INCOMPLETE',
  TRIALING: 'TRIALING',
  PAUSED: 'PAUSED'
};

exports.PurchaseStatus = exports.$Enums.PurchaseStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  SUBSCRIPTION: 'SUBSCRIPTION',
  PURCHASE: 'PURCHASE',
  TIP: 'TIP',
  REFUND: 'REFUND',
  PAYOUT: 'PAYOUT',
  ADJUSTMENT: 'ADJUSTMENT'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REVERSED: 'REVERSED'
};

exports.PayoutStatus = exports.$Enums.PayoutStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELED: 'CANCELED'
};

exports.PayoutMethod = exports.$Enums.PayoutMethod = {
  BANK_TRANSFER: 'BANK_TRANSFER',
  PAYPAL: 'PAYPAL',
  CRYPTO: 'CRYPTO',
  CHECK: 'CHECK'
};

exports.CampaignType = exports.$Enums.CampaignType = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH: 'PUSH',
  IN_APP: 'IN_APP'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  SENDING: 'SENDING',
  SENT: 'SENT',
  CANCELED: 'CANCELED'
};

exports.RecipientStatus = exports.$Enums.RecipientStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  OPENED: 'OPENED',
  CLICKED: 'CLICKED',
  FAILED: 'FAILED'
};

exports.AppCategory = exports.$Enums.AppCategory = {
  ANALYTICS: 'ANALYTICS',
  MARKETING: 'MARKETING',
  CONTENT: 'CONTENT',
  FINANCE: 'FINANCE',
  PRODUCTIVITY: 'PRODUCTIVITY',
  SOCIAL: 'SOCIAL',
  AI: 'AI'
};

exports.AppPricing = exports.$Enums.AppPricing = {
  FREE: 'FREE',
  FREEMIUM: 'FREEMIUM',
  PAID: 'PAID',
  SUBSCRIPTION: 'SUBSCRIPTION'
};

exports.AppStatus = exports.$Enums.AppStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  EXPIRED: 'EXPIRED',
  CANCELED: 'CANCELED'
};

exports.ActorType = exports.$Enums.ActorType = {
  CREATOR: 'CREATOR',
  FAN: 'FAN',
  ADMIN: 'ADMIN',
  SYSTEM: 'SYSTEM',
  APP: 'APP'
};

exports.LedgerAccountType = exports.$Enums.LedgerAccountType = {
  CASH_PLATFORM_STRIPE: 'CASH_PLATFORM_STRIPE',
  PLATFORM_REV_COMMISSION: 'PLATFORM_REV_COMMISSION',
  AR_COMMISSION: 'AR_COMMISSION',
  ALLOWANCE_DOUBTFUL: 'ALLOWANCE_DOUBTFUL',
  TAX_PAYABLE: 'TAX_PAYABLE',
  CREATOR_BALANCE: 'CREATOR_BALANCE',
  DISPUTE_LIABILITY: 'DISPUTE_LIABILITY'
};

exports.LedgerTransactionKind = exports.$Enums.LedgerTransactionKind = {
  CHARGE: 'CHARGE',
  APP_FEE: 'APP_FEE',
  REFUND: 'REFUND',
  DISPUTE_DEBIT: 'DISPUTE_DEBIT',
  DISPUTE_REVERSAL: 'DISPUTE_REVERSAL',
  PAYOUT: 'PAYOUT',
  CAP_ADJUST: 'CAP_ADJUST',
  SUBSCRIPTION: 'SUBSCRIPTION',
  TAX: 'TAX',
  OFFPLAT_EARNINGS_ACCRUAL: 'OFFPLAT_EARNINGS_ACCRUAL',
  OFFPLAT_COMM_ACCRUAL: 'OFFPLAT_COMM_ACCRUAL',
  AR_SETTLEMENT: 'AR_SETTLEMENT',
  AR_WRITE_OFF: 'AR_WRITE_OFF'
};

exports.LedgerDirection = exports.$Enums.LedgerDirection = {
  DEBIT: 'DEBIT',
  CREDIT: 'CREDIT'
};

exports.ExternalPlatform = exports.$Enums.ExternalPlatform = {
  OF: 'OF',
  PATREON: 'PATREON',
  FANSLY: 'FANSLY',
  SUBSTACK: 'SUBSTACK',
  KO_FI: 'KO_FI',
  OTHER: 'OTHER'
};

exports.DunningStatus = exports.$Enums.DunningStatus = {
  ACTIVE: 'ACTIVE',
  RECOVERED: 'RECOVERED',
  WRITTEN_OFF: 'WRITTEN_OFF',
  SUSPENDED: 'SUSPENDED'
};

exports.AutomationTrigger = exports.$Enums.AutomationTrigger = {
  FAN_JOINED: 'FAN_JOINED',
  SUBSCRIPTION_STARTED: 'SUBSCRIPTION_STARTED',
  SUBSCRIPTION_ENDED: 'SUBSCRIPTION_ENDED',
  PURCHASE_MADE: 'PURCHASE_MADE',
  TAG_ADDED: 'TAG_ADDED',
  INACTIVITY: 'INACTIVITY',
  CUSTOM: 'CUSTOM'
};

exports.AutomationStatus = exports.$Enums.AutomationStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  DISABLED: 'DISABLED'
};

exports.Prisma.ModelName = {
  Creator: 'Creator',
  CreatorSettings: 'CreatorSettings',
  SubscriptionPlan: 'SubscriptionPlan',
  Product: 'Product',
  Fan: 'Fan',
  Subscription: 'Subscription',
  Purchase: 'Purchase',
  Transaction: 'Transaction',
  Payout: 'Payout',
  Analytics: 'Analytics',
  FanRelation: 'FanRelation',
  Campaign: 'Campaign',
  CampaignRecipient: 'CampaignRecipient',
  App: 'App',
  InstalledApp: 'InstalledApp',
  AuditLog: 'AuditLog',
  LedgerAccount: 'LedgerAccount',
  LedgerTransaction: 'LedgerTransaction',
  LedgerEntry: 'LedgerEntry',
  CommissionCapMonthly: 'CommissionCapMonthly',
  ExternalEarningsSource: 'ExternalEarningsSource',
  ExternalEarningsImport: 'ExternalEarningsImport',
  NormalizedEarning: 'NormalizedEarning',
  CommissionStatement: 'CommissionStatement',
  DunningState: 'DunningState',
  PaymentAttempt: 'PaymentAttempt',
  Automation: 'Automation',
  BackupLog: 'BackupLog',
  BackupValidation: 'BackupValidation',
  BackupIndex: 'BackupIndex',
  AIUsageLog: 'AIUsageLog',
  CostReservation: 'CostReservation',
  PromptOptimization: 'PromptOptimization',
  CostAlert: 'CostAlert'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
