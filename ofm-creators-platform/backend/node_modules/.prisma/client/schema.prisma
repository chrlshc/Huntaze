generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models
model Creator {
  id                  String         @id @default(cuid())
  email               String         @unique
  username            String         @unique
  displayName         String
  bio                 String?
  avatar              String?
  stripeAccountId     String?        @unique
  stripeCustomerId    String?        @unique
  stripeConnected     Boolean        @default(false)
  kycStatus           KycStatus      @default(PENDING)
  commissionTier      CommissionTier @default(STARTER)
  totalRevenue        Decimal        @default(0) @db.Decimal(10, 2)
  availableBalance    Decimal        @default(0) @db.Decimal(10, 2)
  currency            String         @default("USD")
  locale              String         @default("en-US")
  timezone            String         @default("UTC")
  onboardingCompleted Boolean        @default(false)
  emailVerified       Boolean        @default(false)
  twoFactorEnabled    Boolean        @default(false)
  phoneNumber         String?
  smsOptIn            Boolean        @default(false)

  // Plan & Status
  currentPlan         String        @default("STARTER") // STARTER, PRO, SCALE, ENTERPRISE
  accountStatus       AccountStatus @default(ACTIVE)
  planDowngradedAt    DateTime?
  planDowngradeReason String?
  suspendedAt         DateTime?
  suspensionReason    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptionPlans SubscriptionPlan[]
  products          Product[]
  subscribers       Subscription[]     @relation("CreatorSubscriptions")
  transactions      Transaction[]
  payouts           Payout[]
  analytics         Analytics[]
  installedApps     InstalledApp[]
  auditLogs         AuditLog[]
  settings          CreatorSettings?
  fanRelations      FanRelation[]
  campaigns         Campaign[]
}

model CreatorSettings {
  id        String  @id @default(cuid())
  creatorId String  @unique
  creator   Creator @relation(fields: [creatorId], references: [id])

  // Notification preferences
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)
  pushNotifications  Boolean @default(true)

  // Privacy settings
  showPublicProfile Boolean @default(true)
  allowDMs          Boolean @default(true)

  // Payment settings
  minPayout        Decimal         @default(50) @db.Decimal(10, 2)
  payoutFrequency  PayoutFrequency @default(WEEKLY)
  taxFormSubmitted Boolean         @default(false)
  w9Submitted      Boolean         @default(false)

  // Content settings
  defaultContentAccess ContentAccess @default(SUBSCRIPTION)
  watermarkContent     Boolean       @default(true)

  updatedAt DateTime @updatedAt
}

model SubscriptionPlan {
  id        String  @id @default(cuid())
  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [id])

  name          String
  description   String?
  price         Decimal         @db.Decimal(10, 2)
  currency      String          @default("USD")
  interval      BillingInterval
  intervalCount Int             @default(1)

  // Features
  features         Json // Array of feature strings
  maxDownloads     Int?
  earlyAccess      Boolean @default(false)
  exclusiveContent Boolean @default(true)

  trialPeriodDays Int?

  stripePriceId String? @unique
  isActive      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@unique([creatorId, name])
}

model Product {
  id        String  @id @default(cuid())
  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [id])

  type        ProductType
  title       String
  description String?
  price       Decimal?    @db.Decimal(10, 2) // Null for subscription-only
  currency    String      @default("USD")

  // Content
  contentUrl   String? // For digital products
  thumbnailUrl String?
  previewUrl   String?

  // Access control
  accessType           ContentAccess
  requiresSubscription Boolean       @default(false)

  // Metadata
  tags          String[]
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  viewCount     Int       @default(0)
  purchaseCount Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchases Purchase[]

  @@index([creatorId, isPublished])
}

model Fan {
  id               String  @id @default(cuid())
  email            String  @unique
  username         String? @unique
  displayName      String?
  avatar           String?
  stripeCustomerId String? @unique

  emailVerified Boolean @default(false)
  phoneNumber   String?
  phoneVerified Boolean @default(false)

  locale   String @default("en-US")
  timezone String @default("UTC")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions      Subscription[]      @relation("FanSubscriptions")
  purchases          Purchase[]
  transactions       Transaction[]
  fanRelations       FanRelation[]
  campaignRecipients CampaignRecipient[]
}

model Subscription {
  id        String           @id @default(cuid())
  fanId     String
  fan       Fan              @relation("FanSubscriptions", fields: [fanId], references: [id])
  creatorId String
  creator   Creator          @relation("CreatorSubscriptions", fields: [creatorId], references: [id])
  planId    String
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])

  status             SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  canceledAt         DateTime?
  endedAt            DateTime?

  stripeSubscriptionId String? @unique

  // Metrics
  totalSpent   Decimal @default(0) @db.Decimal(10, 2)
  renewalCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fanId, creatorId, planId])
  @@index([creatorId, status])
}

model Purchase {
  id        String  @id @default(cuid())
  fanId     String
  fan       Fan     @relation(fields: [fanId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  amount   Decimal        @db.Decimal(10, 2)
  currency String
  status   PurchaseStatus

  stripePaymentIntentId String? @unique

  downloadCount  Int       @default(0)
  lastDownloadAt DateTime?

  createdAt DateTime @default(now())

  transaction Transaction?

  @@index([fanId, productId])
}

model Transaction {
  id        String  @id @default(cuid())
  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [id])
  fanId     String?
  fan       Fan?    @relation(fields: [fanId], references: [id])

  type     TransactionType
  amount   Decimal         @db.Decimal(10, 2)
  currency String

  // Commission
  platformFee     Decimal @db.Decimal(10, 2)
  platformFeeRate Decimal @db.Decimal(5, 2)
  netAmount       Decimal @db.Decimal(10, 2)

  status TransactionStatus

  // References
  subscriptionId String?
  purchaseId     String?   @unique
  purchase       Purchase? @relation(fields: [purchaseId], references: [id])
  payoutId       String?
  payout         Payout?   @relation(fields: [payoutId], references: [id])

  stripeTransferId String? @unique

  metadata Json?

  createdAt DateTime @default(now())

  @@index([creatorId, type, status])
}

model Payout {
  id        String  @id @default(cuid())
  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [id])

  amount   Decimal      @db.Decimal(10, 2)
  currency String
  status   PayoutStatus

  method      PayoutMethod
  destination String? // Bank account or other destination info

  stripePayoutId String? @unique

  processedAt   DateTime?
  failureReason String?

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId, status])
}

model Analytics {
  id        String  @id @default(cuid())
  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [id])

  date DateTime @db.Date

  // Revenue metrics
  revenue             Decimal @default(0) @db.Decimal(10, 2)
  subscriptionRevenue Decimal @default(0) @db.Decimal(10, 2)
  productRevenue      Decimal @default(0) @db.Decimal(10, 2)

  // User metrics
  newSubscribers    Int @default(0)
  churned           Int @default(0)
  activeSubscribers Int @default(0)

  // Engagement metrics
  pageViews      Int @default(0)
  uniqueVisitors Int @default(0)
  contentViews   Int @default(0)

  // Conversion metrics
  conversionRate Decimal? @db.Decimal(5, 2)
  avgOrderValue  Decimal? @db.Decimal(10, 2)

  createdAt DateTime @default(now())

  @@unique([creatorId, date])
  @@index([creatorId, date])
}

// CRM Models
model FanRelation {
  id        String  @id @default(cuid())
  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [id])
  fanId     String
  fan       Fan     @relation(fields: [fanId], references: [id])

  tags  String[]
  notes String?

  // Engagement scores
  engagementScore Int       @default(0)
  lifetimeValue   Decimal   @default(0) @db.Decimal(10, 2)
  lastInteraction DateTime?

  // Communication preferences
  emailOptIn Boolean @default(true)
  smsOptIn   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([creatorId, fanId])
}

model Campaign {
  id        String  @id @default(cuid())
  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [id])

  name   String
  type   CampaignType
  status CampaignStatus

  // Content
  subject String?
  content String

  // Targeting
  targetTags    String[]
  targetSegment Json? // Complex targeting rules

  // Schedule
  scheduledFor DateTime?
  sentAt       DateTime?

  // Metrics
  sentCount  Int @default(0)
  openCount  Int @default(0)
  clickCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipients CampaignRecipient[]
}

model CampaignRecipient {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  fanId      String
  fan        Fan      @relation(fields: [fanId], references: [id])

  status    RecipientStatus
  sentAt    DateTime?
  openedAt  DateTime?
  clickedAt DateTime?

  @@unique([campaignId, fanId])
}

// App Store Models
model App {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String
  icon        String?

  developer String
  website   String?

  category AppCategory

  // Pricing
  pricing AppPricing
  price   Decimal?   @db.Decimal(10, 2)

  // Integration
  webhookUrl String?
  scopes     String[] // Required API scopes

  isPublished Boolean @default(false)
  isVerified  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  installations InstalledApp[]
}

model InstalledApp {
  id        String  @id @default(cuid())
  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [id])
  appId     String
  app       App     @relation(fields: [appId], references: [id])

  status AppStatus

  // Configuration
  settings Json?

  // Billing
  billingCycle BillingInterval?
  nextBilling  DateTime?

  installedAt   DateTime  @default(now())
  uninstalledAt DateTime?

  @@unique([creatorId, appId])
}

// Security & Compliance
model AuditLog {
  id        String   @id @default(cuid())
  creatorId String?
  creator   Creator? @relation(fields: [creatorId], references: [id])

  actorId   String // Can be creator or system
  actorType ActorType

  action     String
  resource   String
  resourceId String?

  ipAddress String?
  userAgent String?

  metadata Json?

  createdAt DateTime @default(now())

  @@index([creatorId, action])
  @@index([resource, resourceId])
}

// Enums
enum KycStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum CommissionTier {
  STARTER // 20%
  PRO // 15%
  SCALE // 10%
  ENTERPRISE // 5%
}

enum PayoutFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum ContentAccess {
  FREE
  SUBSCRIPTION
  PAY_PER_VIEW
  MIXED
}

enum BillingInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum ProductType {
  POST
  VIDEO
  IMAGE_SET
  BUNDLE
  LIVE_STREAM
  MESSAGE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  TRIALING
  PAUSED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  SUBSCRIPTION
  PURCHASE
  TIP
  REFUND
  PAYOUT
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REVERSED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELED
}

enum PayoutMethod {
  BANK_TRANSFER
  PAYPAL
  CRYPTO
  CHECK
}

enum CampaignType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELED
}

enum RecipientStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  FAILED
}

enum AppCategory {
  ANALYTICS
  MARKETING
  CONTENT
  FINANCE
  PRODUCTIVITY
  SOCIAL
  AI
}

enum AppPricing {
  FREE
  FREEMIUM
  PAID
  SUBSCRIPTION
}

enum AppStatus {
  ACTIVE
  PAUSED
  EXPIRED
  CANCELED
}

enum ActorType {
  CREATOR
  FAN
  ADMIN
  SYSTEM
  APP
}

// LEDGER ACCOUNTING SYSTEM
enum LedgerTransactionKind {
  // On-platform
  CHARGE
  APP_FEE
  REFUND
  DISPUTE_DEBIT
  DISPUTE_REVERSAL
  PAYOUT
  CAP_ADJUST
  SUBSCRIPTION
  TAX

  // Off-platform
  OFFPLAT_EARNINGS_ACCRUAL
  OFFPLAT_COMM_ACCRUAL
  AR_SETTLEMENT
  AR_WRITE_OFF
}

enum LedgerDirection {
  DEBIT
  CREDIT
}

enum LedgerAccountType {
  CASH_PLATFORM_STRIPE
  PLATFORM_REV_COMMISSION
  AR_COMMISSION
  ALLOWANCE_DOUBTFUL
  TAX_PAYABLE
  CREATOR_BALANCE
  DISPUTE_LIABILITY
}

enum ExternalPlatform {
  OF
  PATREON
  FANSLY
  SUBSTACK
  KO_FI
  OTHER
}

model LedgerAccount {
  id        String            @id @default(cuid())
  tenantId  String            @default("default")
  type      LedgerAccountType
  currency  String
  ownerId   String? // creatorId for AR accounts
  balance   BigInt            @default(0) // in cents
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  entries LedgerEntry[]

  @@unique([tenantId, type, currency, ownerId])
  @@index([tenantId, type, currency])
  @@index([tenantId, ownerId])
}

model LedgerTransaction {
  id             String                @id @default(cuid())
  tenantId       String                @default("default")
  kind           LedgerTransactionKind
  currency       String
  occurredAt     DateTime
  memo           String?
  source         String? // "of", "patreon", "fansly", "stripe"
  extRef         String? // external reference
  stripeEventId  String?               @unique
  idempotencyKey String?               @unique
  reversedBy     String? // transaction ID that reverses this one
  createdAt      DateTime              @default(now())

  entries LedgerEntry[]

  @@index([tenantId, occurredAt])
  @@index([tenantId, kind])
  @@index([idempotencyKey])
}

model LedgerEntry {
  id          String          @id @default(cuid())
  txId        String
  accountId   String
  direction   LedgerDirection
  amountCents BigInt
  currency    String
  createdAt   DateTime        @default(now())

  transaction LedgerTransaction @relation(fields: [txId], references: [id], onDelete: Cascade)
  account     LedgerAccount     @relation(fields: [accountId], references: [id], onDelete: Restrict)

  @@index([txId])
  @@index([accountId])
}

model CommissionCapMonthly {
  id           String   @id @default(cuid())
  creatorId    String
  yearMonth    String // "2025-01"
  currency     String
  capCents     BigInt
  appliedCents BigInt   @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([creatorId, yearMonth, currency])
}

// OFF-PLATFORM EARNINGS TRACKING
model ExternalEarningsSource {
  id             String           @id @default(cuid())
  creatorId      String
  platform       ExternalPlatform
  externalHandle String // username on external platform
  currency       String
  connectedAt    DateTime         @default(now())
  active         Boolean          @default(true)
  lastSync       DateTime?
  metadata       Json?

  imports  ExternalEarningsImport[]
  earnings NormalizedEarning[]

  @@unique([creatorId, platform, externalHandle])
  @@index([creatorId, platform])
}

model ExternalEarningsImport {
  id           String    @id @default(cuid())
  sourceId     String
  periodStart  DateTime
  periodEnd    DateTime
  rawHash      String // SHA256 of raw data for deduplication
  rawJson      Json
  processedAt  DateTime?
  errorMessage String?
  createdAt    DateTime  @default(now())

  source ExternalEarningsSource @relation(fields: [sourceId], references: [id])

  @@unique([sourceId, periodStart, periodEnd, rawHash])
}

model NormalizedEarning {
  id         String   @id @default(cuid())
  sourceId   String
  occurredAt DateTime
  currency   String
  grossCents BigInt // gross amount before platform fees
  feesCents  BigInt // platform fees
  netCents   BigInt // net to creator
  payoutId   String? // external payout reference
  extRef     String? // external transaction reference
  metadata   Json?
  createdAt  DateTime @default(now())

  source ExternalEarningsSource @relation(fields: [sourceId], references: [id])

  @@index([sourceId, occurredAt])
  @@index([payoutId])
}

model CommissionStatement {
  id              String           @id @default(cuid())
  creatorId       String
  platform        ExternalPlatform
  yearMonth       String
  currency        String
  baseNetCents    BigInt // total net earnings
  rateBps         Int // rate in basis points
  commissionCents BigInt // calculated commission
  capAppliedCents BigInt // reduction due to cap
  finalCents      BigInt // final amount due
  closedAt        DateTime?
  invoicedAt      DateTime?
  stripeInvoiceId String?          @unique
  paidAt          DateTime?
  writeOffAt      DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([creatorId, platform, yearMonth, currency])
}

// DUNNING & PAYMENT RECOVERY
model DunningState {
  id           String        @id @default(cuid())
  invoiceId    String        @unique
  creatorId    String
  attemptCount Int           @default(0)
  status       DunningStatus
  lastAttempt  DateTime?
  nextAttempt  DateTime?
  recoveredAt  DateTime?
  writeOffAt   DateTime?
  metadata     Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([status, nextAttempt])
  @@index([creatorId])
}

model PaymentAttempt {
  id              String   @id @default(cuid())
  invoiceId       String
  attemptNumber   Int
  status          String // succeeded, failed, requires_action
  errorCode       String?
  errorMessage    String?
  paymentMethodId String?
  amount          BigInt
  currency        String
  createdAt       DateTime @default(now())

  @@index([invoiceId])
}

enum DunningStatus {
  ACTIVE
  RECOVERED
  WRITTEN_OFF
  SUSPENDED
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

// AUTOMATION
model Automation {
  id          String            @id @default(cuid())
  creatorId   String
  name        String
  triggerType AutomationTrigger
  conditions  Json?
  actions     Json
  status      AutomationStatus  @default(ACTIVE)
  lastRun     DateTime?
  runCount    Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([creatorId, status])
}

enum AutomationTrigger {
  FAN_JOINED
  SUBSCRIPTION_STARTED
  SUBSCRIPTION_ENDED
  PURCHASE_MADE
  TAG_ADDED
  INACTIVITY
  CUSTOM
}

enum AutomationStatus {
  ACTIVE
  PAUSED
  DISABLED
}

model BackupLog {
  id       String  @id @default(cuid())
  status   String // success, failed, partial
  duration Int? // milliseconds
  error    String?
  metadata Json?

  createdAt DateTime @default(now())

  @@index([status, createdAt])
}

model BackupValidation {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  results   Json // Array of validation results
  summary   Json // Summary statistics
  status    String // success, failed

  createdAt DateTime @default(now())

  @@index([status, timestamp])
}

model BackupIndex {
  id        String   @id @default(cuid())
  backupId  String   @unique
  timestamp DateTime
  metadata  Json // Total size, record count, checksum
  tables    Json // Array of table indexes with chunks

  createdAt DateTime @default(now())

  @@index([timestamp])
}

model AIUsageLog {
  id               String   @id @default(cuid())
  provider         String // azure, anthropic, openai
  model            String // gpt-4, claude-3, etc
  purpose          String // chat, analysis, classification
  userId           String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  cost             Float
  cached           Boolean  @default(false)
  timestamp        DateTime @default(now())

  @@index([provider, timestamp])
  @@index([userId, timestamp])
  @@index([purpose, timestamp])
}

model CostReservation {
  id         String   @id @default(cuid())
  provider   String // AWS, OpenAI, Anthropic
  service    String // S3, GPT-4, Claude
  commitment String // monthly, annual
  units      Float // Reserved units
  unitPrice  Float // Price per unit
  savings    Float // Estimated savings
  startDate  DateTime
  endDate    DateTime
  status     String // active, expired, cancelled

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, provider])
  @@index([endDate])
}

model PromptOptimization {
  id              String   @id @default(cuid())
  userId          String
  originalPrompt  String   @db.Text
  optimizedPrompt String   @db.Text
  originalTokens  Int
  optimizedTokens Int
  tokenReduction  Float // Percentage
  qualityScore    Float? // 0-100
  abTestResults   Json? // A/B test data
  timestamp       DateTime @default(now())

  @@index([userId, timestamp])
  @@index([tokenReduction])
}

model CostAlert {
  id         String    @id @default(cuid())
  type       String // budget_warning, budget_critical, anomaly
  service    String // backup, ai, total
  threshold  Float // Percentage or amount
  current    Float // Current usage
  message    String
  resolved   Boolean   @default(false)
  resolvedAt DateTime?

  createdAt DateTime @default(now())

  @@index([type, resolved])
  @@index([service, createdAt])
}
