name: CFN Execute Latest (core→media→ai)
on: { workflow_dispatch: {} }
permissions: { id-token: write, contents: read }
env: { AWS_REGION: us-east-1 }
jobs:
  exec:
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq
      - name: Execute latest per stack
        run: |
          set -euo pipefail
          exe () {
            local S="$1"
            echo "::group::Resolve latest changeset for $S"
            N=$(aws cloudformation list-change-sets --stack-name "$S" --region $AWS_REGION \
                 --query 'Summaries|sort_by(@,&CreationTime)[-1].ChangeSetName' --output text)
            [ "$N" != "None" ] || { echo "No ChangeSet for $S"; echo "::endgroup::"; return 0; }
            echo "$S → $N" | tee -a $GITHUB_STEP_SUMMARY
            CS_ARN=$(aws cloudformation list-change-sets --stack-name "$S" --region $AWS_REGION \
                     --query "Summaries[?ChangeSetName=='${N}'].ChangeSetId | [0]" --output text)
            DESC=$(aws cloudformation describe-change-set --stack-name "$S" --change-set-name "$CS_ARN" --region $AWS_REGION)
            STATUS=$(echo "$DESC" | jq -r '.Status')
            CHG=$(echo "$DESC" | jq -r '.Changes | length')
            if [[ "$STATUS" != "CREATE_COMPLETE" && "$STATUS" != "AVAILABLE" ]]; then
              echo "ChangeSet not executable: $STATUS"; echo "::endgroup::"; exit 1
            fi
            # Pre-check: block on critical Replacement/RequiresRecreation (RDS/S3/RestApi/CognitoDomain)
            CRIT_JSON=$(echo "$DESC" | jq -r '[.Changes[].ResourceChange
              | select((.ResourceType|test("AWS::RDS::DBInstance|AWS::S3::Bucket|AWS::ApiGateway::RestApi|AWS::Cognito::UserPoolDomain"))
                       and ((.Replacement=="True") or ([.Details[].Target.RequiresRecreation]
                             | map(select(. != null and . != "Never")) | length > 0)))]')
            CRIT_COUNT=$(echo "$CRIT_JSON" | jq -r 'length')
            if [ "$CRIT_COUNT" -gt 0 ]; then
              echo "::error ::Blocking execution for $S — critical Replacement/RequiresRecreation detected ($CRIT_COUNT)."
              echo "$CRIT_JSON" | jq -r '.[] | "- " + .Action + " " + .LogicalResourceId + " (" + .ResourceType + ") — Replacement=" + ( .Replacement // "<unknown>" )'
              {
                echo "### ⛔ Blocked: Critical Replacement/RequiresRecreation in $S"
                echo
                echo '```'
                echo 'ResourceType, Action, LogicalResourceId, Replacement, RequiresRecreation'
                echo "$CRIT_JSON" | jq -r '.[] | "\(.ResourceType), \(.Action), \(.LogicalResourceId), \(.Replacement // "<unknown>"), \([.Details[]?.Target.RequiresRecreation] | map(select(. != null and . != "Never")) | join("|") | . // "<none>")"'
                echo '```'
              } >> "$GITHUB_STEP_SUMMARY"
              echo "::endgroup::"; exit 1
            fi
            # Non-blocking: alert on IAM deltas
            IAM_JSON=$(echo "$DESC" | jq -c '[.Changes[].ResourceChange | select(.ResourceType | startswith("AWS::IAM::"))]')
            if [ "$IAM_JSON" != "[]" ]; then
              echo "⚠️ IAM changes on $S:" && echo "$IAM_JSON" | jq -C . || true
              {
                echo "### ⚠️ IAM changes detected in $S"
                echo '```'
                echo 'ResourceType, Action, LogicalResourceId'
                echo "$IAM_JSON" | jq -r '.[] | "\(.ResourceType), \(.Action), \(.LogicalResourceId)"'
                echo '```'
              } >> "$GITHUB_STEP_SUMMARY"
            fi
            if [ "$CHG" -eq 0 ]; then
              echo "No-op, skipping $S"; echo "::endgroup::"; return 0
            fi
            echo "::endgroup::"
            echo "::group::Execute $S"
            aws cloudformation execute-change-set --stack-name "$S" --change-set-name "$CS_ARN" --region $AWS_REGION
            aws cloudformation wait stack-update-complete --stack-name "$S" --region $AWS_REGION
            echo "✅ Completed $S"
            echo "::endgroup::"
          }
          exe huntaze-auth-simple
          sleep 30
          exe huntaze-media-processing-production
          sleep 30
          exe huntaze-ai-notifications

