'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "appconfig",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class AppConfigDataClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultAppConfigDataHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class AppConfigDataServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, AppConfigDataServiceException.prototype);
    }
}

const InvalidParameterProblem = {
    CORRUPTED: "Corrupted",
    EXPIRED: "Expired",
    POLL_INTERVAL_NOT_SATISFIED: "PollIntervalNotSatisfied",
};
exports.BadRequestDetails = void 0;
(function (BadRequestDetails) {
    BadRequestDetails.visit = (value, visitor) => {
        if (value.InvalidParameters !== undefined)
            return visitor.InvalidParameters(value.InvalidParameters);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.BadRequestDetails || (exports.BadRequestDetails = {}));
const BadRequestReason = {
    INVALID_PARAMETERS: "InvalidParameters",
};
class BadRequestException extends AppConfigDataServiceException {
    name = "BadRequestException";
    $fault = "client";
    Message;
    Reason;
    Details;
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Details = opts.Details;
    }
}
class InternalServerException extends AppConfigDataServiceException {
    name = "InternalServerException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
const ResourceType = {
    APPLICATION: "Application",
    CONFIGURATION: "Configuration",
    CONFIGURATION_PROFILE: "ConfigurationProfile",
    DEPLOYMENT: "Deployment",
    ENVIRONMENT: "Environment",
};
class ResourceNotFoundException extends AppConfigDataServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    ResourceType;
    ReferencedBy;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.ReferencedBy = opts.ReferencedBy;
    }
}
class ThrottlingException extends AppConfigDataServiceException {
    name = "ThrottlingException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
const GetLatestConfigurationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Configuration && { Configuration: smithyClient.SENSITIVE_STRING }),
});

const se_GetLatestConfigurationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/configuration");
    const query = smithyClient.map({
        [_ct]: [, smithyClient.expectNonNull(input[_CT], `ConfigurationToken`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_StartConfigurationSessionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationsessions");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        ApplicationIdentifier: [],
        ConfigurationProfileIdentifier: [],
        EnvironmentIdentifier: [],
        RequiredMinimumPollIntervalInSeconds: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const de_GetLatestConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_NPCT]: [, output.headers[_npct]],
        [_NPIIS]: [() => void 0 !== output.headers[_npiis], () => smithyClient.strictParseInt32(output.headers[_npiis])],
        [_CTo]: [, output.headers[_ct_]],
        [_VL]: [, output.headers[_vl]],
    });
    const data = await smithyClient.collectBody(output.body, context);
    contents.Configuration = data;
    return contents;
};
const de_StartConfigurationSessionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        InitialConfigurationToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfigdata#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput);
        case "InternalServerException":
        case "com.amazonaws.appconfigdata#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfigdata#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.appconfigdata#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(AppConfigDataServiceException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Details: (_) => smithyClient._json(core$1.awsExpectUnion(_)),
        Message: smithyClient.expectString,
        Reason: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
        ReferencedBy: smithyClient._json,
        ResourceType: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _CT = "ConfigurationToken";
const _CTo = "ContentType";
const _NPCT = "NextPollConfigurationToken";
const _NPIIS = "NextPollIntervalInSeconds";
const _VL = "VersionLabel";
const _ct = "configuration_token";
const _ct_ = "content-type";
const _npct = "next-poll-configuration-token";
const _npiis = "next-poll-interval-in-seconds";
const _vl = "version-label";

class GetLatestConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AppConfigData", "GetLatestConfiguration", {})
    .n("AppConfigDataClient", "GetLatestConfigurationCommand")
    .f(void 0, GetLatestConfigurationResponseFilterSensitiveLog)
    .ser(se_GetLatestConfigurationCommand)
    .de(de_GetLatestConfigurationCommand)
    .build() {
}

class StartConfigurationSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AppConfigData", "StartConfigurationSession", {})
    .n("AppConfigDataClient", "StartConfigurationSessionCommand")
    .f(void 0, void 0)
    .ser(se_StartConfigurationSessionCommand)
    .de(de_StartConfigurationSessionCommand)
    .build() {
}

const commands = {
    GetLatestConfigurationCommand,
    StartConfigurationSessionCommand,
};
class AppConfigData extends AppConfigDataClient {
}
smithyClient.createAggregatedClient(commands, AppConfigData);

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AppConfigData = AppConfigData;
exports.AppConfigDataClient = AppConfigDataClient;
exports.AppConfigDataServiceException = AppConfigDataServiceException;
exports.BadRequestException = BadRequestException;
exports.BadRequestReason = BadRequestReason;
exports.GetLatestConfigurationCommand = GetLatestConfigurationCommand;
exports.GetLatestConfigurationResponseFilterSensitiveLog = GetLatestConfigurationResponseFilterSensitiveLog;
exports.InternalServerException = InternalServerException;
exports.InvalidParameterProblem = InvalidParameterProblem;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ResourceType = ResourceType;
exports.StartConfigurationSessionCommand = StartConfigurationSessionCommand;
exports.ThrottlingException = ThrottlingException;
