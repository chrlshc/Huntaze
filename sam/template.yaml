AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Huntaze Prisma Walking Skeleton - Canary Deployment with Shadow Traffic

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 30
    Tracing: Active
    MemorySize: 512
    Environment:
      Variables:
        NODE_ENV: production
        APP_ID: !Ref AppConfigApp
        ENV_ID: !Ref AppConfigEnv
        FEATURES_PROFILE_ID: !Ref AppConfigProfile

Parameters:
  DatabaseSecretArn:
    Type: String
    Description: ARN of the database secret in Secrets Manager
    Default: arn:aws:secretsmanager:us-east-1:317805897534:secret:huntaze/database
  
  CostAnomalyMonitorArn:
    Type: String
    Description: ARN of existing Cost Anomaly Monitor
    Default: arn:aws:ce::317805897534:anomalymonitor/c23a49a4-8fbf-4e6f-b242-9c5db0913b1a

Resources:
  # AppConfig Application
  AppConfigApp:
    Type: AWS::AppConfig::Application
    Properties:
      Name: huntaze-flags
      Description: Feature flags for Huntaze

  AppConfigEnv:
    Type: AWS::AppConfig::Environment
    Properties:
      ApplicationId: !Ref AppConfigApp
      Name: production
      Description: Production environment

  AppConfigProfile:
    Type: AWS::AppConfig::ConfigurationProfile
    Properties:
      ApplicationId: !Ref AppConfigApp
      Name: feature-flags
      LocationUri: hosted
      Type: AWS.AppConfig.FeatureFlags

  # Canary Deployment Strategy (1% over 5 minutes)
  AppConfigDeploymentStrategy:
    Type: AWS::AppConfig::DeploymentStrategy
    Properties:
      Name: Canary1Percent5Minutes
      Description: Deploy to 1% over 5 minutes with 5 min bake time
      DeploymentDurationInMinutes: 5
      GrowthFactor: 1
      GrowthType: LINEAR
      ReplicateTo: NONE
      FinalBakeTimeInMinutes: 5

  # Main Lambda (Mock/Control with Shadow)
  MockReadFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huntaze-mock-read
      CodeUri: ../lambda/
      Handler: mock-handler.handler
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
          - !Ref ErrorRateAlarm
      Environment:
        Variables:
          CANDIDATE_FN_ARN: !GetAtt PrismaReadFn.Arn
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Effect: Allow
              Action:
                - appconfig:StartConfigurationSession
                - appconfig:GetLatestConfiguration
              Resource: '*'
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt PrismaReadFn.Arn
            - Effect: Allow
              Action: logs:CreateLogGroup
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/huntaze-mock-read:*'

  # Candidate Lambda (Prisma)
  PrismaReadFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huntaze-prisma-read
      CodeUri: ../lambda/
      Handler: prisma-handler.handler
      Environment:
        Variables:
          DATABASE_URL: !Sub '{{resolve:secretsmanager:${DatabaseSecretArn}:SecretString:DATABASE_URL}}'
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DatabaseSecretArn
            - Effect: Allow
              Action: logs:CreateLogGroup
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/huntaze-prisma-read:*'

  # CloudWatch Alarm (error rate > 2% over 5 minutes)
  ErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: huntaze-lambda-error-rate-gt-2pct
      AlarmDescription: Trigger rollback if error rate exceeds 2% over 5 minutes
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0.02
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorRate
          Expression: "errors / FILL(invocations, 1)"
          Label: Error Rate
        - Id: errors
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Errors
              Dimensions:
                - Name: FunctionName
                  Value: !Ref MockReadFn
            Period: 60
            Stat: Sum
          ReturnData: false
        - Id: invocations
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Ref MockReadFn
            Period: 60
            Stat: Sum
          ReturnData: false

  # Metric Math Alarm (More Accurate Error Rate)
  ErrorRateAlarmMetricMath:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: huntaze-lambda-error-rate-metric-math
      AlarmDescription: "Error rate calculated via Metric Math (Errors/Invocations)"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 2
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref ErrorRateAlarmTopic
      Metrics:
        - Id: e1
          Expression: "IF(m2>0, (m1/m2)*100, 0)"
          Label: "Error Rate %"
        - Id: m1
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Errors
              Dimensions:
                - Name: FunctionName
                  Value: !Ref MockReadFn
            Period: 300
            Stat: Sum
          ReturnData: false
        - Id: m2
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Ref MockReadFn
            Period: 300
            Stat: Sum
          ReturnData: false

  # Performance Alarm (P95 Latency)
  PerformanceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: huntaze-lambda-p95-latency
      AlarmDescription: "P95 latency > 500ms"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 500
      TreatMissingData: notBreaching
      MetricName: Duration
      Namespace: AWS/Lambda
      ExtendedStatistic: "p95"
      Dimensions:
        - Name: FunctionName
          Value: !Ref MockReadFn
      Period: 300

  # SNS Topic for Alerts
  ErrorRateAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: huntaze-production-alerts
      DisplayName: "Huntaze Production Alerts"

  # Cost Monitoring - AWS Budget
  MonthlyBudget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: huntaze-monthly-budget
        BudgetLimit:
          Amount: 100
          Unit: USD
        TimeUnit: MONTHLY
        BudgetType: COST
        CostFilters: {}
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 50
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref ErrorRateAlarmTopic
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 80
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref ErrorRateAlarmTopic
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 100
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref ErrorRateAlarmTopic
        - Notification:
            NotificationType: FORECASTED
            ComparisonOperator: GREATER_THAN
            Threshold: 100
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref ErrorRateAlarmTopic

  # Cost Anomaly Detection Subscription (using existing monitor)
  CostAnomalySubscription:
    Type: AWS::CE::AnomalySubscription
    Properties:
      SubscriptionName: huntaze-cost-anomaly-alerts
      Threshold: 10
      Frequency: IMMEDIATE
      MonitorArnList:
        - !Ref CostAnomalyMonitorArn
      Subscribers:
        - Type: SNS
          Address: !Ref ErrorRateAlarmTopic

  # Log Groups with Retention (Cost Optimization)
  # Note: Log groups are created automatically by Lambda
  # We configure retention via AWS CLI after deployment

  # X-Ray Sampling Rule (Reduce costs after stabilization)
  XRaySamplingRule:
    Type: AWS::XRay::SamplingRule
    Properties:
      SamplingRule:
        RuleName: huntaze-production-sampling
        Priority: 1000
        FixedRate: 0.1
        ReservoirSize: 1
        ServiceName: "huntaze-*"
        ServiceType: "*"
        Host: "*"
        HTTPMethod: "*"
        URLPath: "*"
        ResourceARN: "*"
        Version: 1

  # Dead Letter Queue (Error Handling)
  DLQQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: huntaze-lambda-dlq
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60

  # EventBridge Rule (cleanup after 7 days)
  CleanupSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: huntaze-flag-cleanup-7days
      Description: Cleanup feature flags after 7 days of stability
      ScheduleExpression: rate(7 days)
      State: ENABLED
      Targets:
        - Arn: !GetAtt CleanupFn.Arn
          Id: cleanup-target

  CleanupFnPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CleanupFn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CleanupSchedule.Arn

  CleanupFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huntaze-flag-cleanup
      CodeUri: ../lambda/
      Handler: cleanup-handler.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - appconfig:GetConfigurationProfile
                - appconfig:CreateHostedConfigurationVersion
                - appconfig:StartDeployment
              Resource: '*'
            - Effect: Allow
              Action: logs:CreateLogGroup
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/huntaze-flag-cleanup:*'

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: huntaze-prisma-migration
      DashboardBody: !Sub >
        {
          "widgets": [
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", {"stat": "Sum"}],
                  [".", "Errors", {"stat": "Sum"}]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "title": "Lambda Metrics",
                "period": 60
              }
            },
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/Budgets", "ActualSpend", {"stat": "Average"}],
                  [".", "ForecastedSpend", {"stat": "Average"}]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "title": "Cost Monitoring - Budget",
                "period": 86400,
                "yAxis": {
                  "left": {
                    "label": "USD"
                  }
                }
              }
            }
          ]
        }

Outputs:
  MockReadFnArn:
    Description: ARN of the Mock Read Lambda
    Value: !GetAtt MockReadFn.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MockReadFnArn'

  PrismaReadFnArn:
    Description: ARN of the Prisma Read Lambda
    Value: !GetAtt PrismaReadFn.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PrismaReadFnArn'

  ErrorRateAlarmArn:
    Description: ARN of the Error Rate Alarm
    Value: !GetAtt ErrorRateAlarm.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ErrorRateAlarmArn'

  MetricMathAlarmArn:
    Description: "ARN of the Metric Math Error Rate Alarm"
    Value: !GetAtt ErrorRateAlarmMetricMath.Arn
    Export:
      Name: !Sub "${AWS::StackName}-MetricMathAlarm"

  XRaySamplingRuleName:
    Description: "X-Ray Sampling Rule Name"
    Value: !Ref XRaySamplingRule
    Export:
      Name: !Sub "${AWS::StackName}-XRaySamplingRule"

  AlertsTopicArn:
    Description: "SNS Topic for Production Alerts"
    Value: !Ref ErrorRateAlarmTopic
    Export:
      Name: !Sub "${AWS::StackName}-AlertsTopic"

  AppConfigAppId:
    Description: AppConfig Application ID
    Value: !Ref AppConfigApp
    Export:
      Name: !Sub '${AWS::StackName}-AppConfigAppId'

  AppConfigEnvId:
    Description: AppConfig Environment ID
    Value: !Ref AppConfigEnv
    Export:
      Name: !Sub '${AWS::StackName}-AppConfigEnvId'

  AppConfigProfileId:
    Description: AppConfig Configuration Profile ID
    Value: !Ref AppConfigProfile
    Export:
      Name: !Sub '${AWS::StackName}-AppConfigProfileId'

  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=huntaze-prisma-migration'

  BudgetName:
    Description: "AWS Budget Name"
    Value: huntaze-monthly-budget
    Export:
      Name: !Sub "${AWS::StackName}-BudgetName"

  CostAnomalyMonitorArn:
    Description: "Cost Anomaly Monitor ARN (existing)"
    Value: !Ref CostAnomalyMonitorArn
    Export:
      Name: !Sub "${AWS::StackName}-CostAnomalyMonitor"
