'use client';

import { useState } from 'react';
import { Play, CheckCircle, TrendingUp, Calendar, DollarSign, Star, ExternalLink } from 'lucide-react';
import { LineChart, Line, Area, AreaChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';
// import CountUp from 'react-countup'; // Désactivé pour les performances

const stories = [
  {
    id: 1,
    name: 'Sarah M.',
    role: 'Fashion Creator',
    initials: 'SM',
    avatar: '/avatars/sarah.jpg', // fallback to initials
    before: 3000,
    after: 45000,
    duration: '6 months',
    platform: 'OnlyFans',
    topPercentage: '0.5%',
    verified: true,
    quote: 'Huntaze helped me go from $3K to $45K/month! The AI automation saves me 20+ hours per week.',
    videoTestimonialUrl: '/testimonials/sarah.mp4',
    growthPercentage: 1400,
    monthlyGrowth: 233,
    currentMRR: 45000,
    chartData: [
      { month: 'Jan', revenue: 3000 },
      { month: 'Feb', revenue: 5500 },
      { month: 'Mar', revenue: 12000 },
      { month: 'Apr', revenue: 22000 },
      { month: 'May', revenue: 35000 },
      { month: 'Jun', revenue: 45000 },
    ],
    color: 'purple'
  },
  {
    id: 2,
    name: 'Emma L.',
    role: 'Fitness Creator',
    initials: 'EL',
    before: 8000,
    after: 62000,
    duration: '4 months',
    platform: 'OnlyFans',
    topPercentage: '1%',
    verified: true,
    quote: 'From $8K to $62K in 4 months! The smart pricing feature alone increased my revenue by 40%.',
    growthPercentage: 675,
    monthlyGrowth: 169,
    currentMRR: 62000,
    chartData: [
      { month: 'Mar', revenue: 8000 },
      { month: 'Apr', revenue: 18000 },
      { month: 'May', revenue: 38000 },
      { month: 'Jun', revenue: 62000 },
    ],
    color: 'pink'
  },
  {
    id: 3,
    name: 'Sofia R.',
    role: 'Lifestyle Creator',
    initials: 'SR',
    before: 5000,
    after: 28000,
    duration: '5 months',
    platform: 'OnlyFans',
    topPercentage: '2%',
    verified: true,
    quote: 'The AI responds exactly like me! My fans love the instant replies and I love the freedom.',
    growthPercentage: 460,
    monthlyGrowth: 92,
    currentMRR: 28000,
    chartData: [
      { month: 'Feb', revenue: 5000 },
      { month: 'Mar', revenue: 9000 },
      { month: 'Apr', revenue: 15000 },
      { month: 'May', revenue: 22000 },
      { month: 'Jun', revenue: 28000 },
    ],
    color: 'blue'
  }
];

const VideoModal = ({ isOpen, onClose, creatorName, videoUrl }: any) => {
  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm"
      onClick={onClose}
    >
      <div
        className="relative max-w-4xl w-full mx-4 bg-gray-900 rounded-2xl overflow-hidden"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="aspect-video bg-black">
          <div className="flex items-center justify-center h-full">
            <Play className="w-20 h-20 text-white/50" />
          </div>
        </div>
        <div className="p-6">
          <h3 className="text-xl font-bold text-white">{creatorName}\'s Success Story</h3>
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 bg-white/10 rounded-full hover:bg-white/20 transition-colors"
          >
            <span className="text-white">✕</span>
          </button>
        </div>
      </div>
    </div>
  );
};

const CustomTooltip = ({ active, payload, label }: any) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-gray-900 border border-purple-500/30 rounded-lg p-3">
        <p className="text-sm text-gray-400">{label}</p>
        <p className="text-lg font-bold text-white">
          ${payload[0].value.toLocaleString()}
        </p>
      </div>
    );
  }
  return null;
};

const RevenueChart = ({ story, isActive }: { story: typeof stories[0]; isActive: boolean }) => {

  return (
    <div className="h-64 relative mb-6">
      <ResponsiveContainer width="100%" height="100%">
        <AreaChart data={story.chartData}>
          <defs>
            <linearGradient id={`gradient-${story.id}`} x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#a855f7" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#a855f7" stopOpacity={0.1}/>
            </linearGradient>
          </defs>
          <XAxis 
            dataKey="month" 
            stroke="#6b7280"
            style={{ fontSize: 12 }}
            tick={{ fill: '#9ca3af' }}
          />
          <YAxis 
            stroke="#6b7280"
            style={{ fontSize: 12 }}
            tick={{ fill: '#9ca3af' }}
            tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}
          />
          <Tooltip content={<CustomTooltip />} />
          <Area 
            type="monotone" 
            dataKey="revenue" 
            stroke="#a855f7" 
            strokeWidth={3}
            fill={`url(#gradient-${story.id})`}
            animationDuration={isActive ? 2000 : 0}
            animationBegin={0}
          />
        </AreaChart>
      </ResponsiveContainer>
      
      <div
        className="absolute inset-0 pointer-events-none opacity-10"
      >
        <div className="absolute inset-0 bg-linear-to-t from-gray-900 to-transparent" />
      </div>
    </div>
  );
};

const SuccessStoryCard = ({ creator, isActive }: { creator: typeof stories[0], isActive: boolean }) => {
  const [isVideoModalOpen, setIsVideoModalOpen] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  return (
    <>
      <div 
        className={`relative bg-linear-to-br from-gray-900/95 via-gray-800/95 to-gray-900/95 rounded-3xl overflow-hidden backdrop-blur-xl transition-all duration-500 ${
          isActive ? 'scale-100 opacity-100' : 'scale-95 opacity-50'
        }`}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        {/* Background gradient */}
        <div 
          className="absolute inset-0 opacity-30 transition-all duration-1000"
          style={{ 
            background: isHovered 
              ? 'radial-gradient(circle at 30% 50%, rgba(168, 85, 247, 0.3), transparent 70%)'
              : 'radial-gradient(circle at 70% 50%, rgba(236, 72, 153, 0.2), transparent 70%)'
          }}
        />


        <div className="relative z-10 p-8">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Creator Profile Section */}
            <div className="flex flex-col items-center lg:items-start space-y-4">
              {/* Professional Avatar with Gradient */}
              <div 
                className="relative hover:scale-105 transition-transform"
              >
                <div className="w-24 h-24 bg-linear-to-br from-purple-500 via-pink-500 to-purple-600 rounded-full flex items-center justify-center shadow-2xl shadow-purple-500/25">
                  <span className="text-3xl font-bold text-white tracking-tight">{creator.initials}</span>
                </div>
                
                {/* Verified Badge */}
                {creator.verified && (
                  <div 
                    className="absolute -bottom-2 -right-2 w-8 h-8 bg-green-500 rounded-full flex items-center justify-center border-4 border-gray-900"
                  >
                    <CheckCircle className="w-4 h-4 text-white" />
                  </div>
                )}
              </div>

              {/* Creator Info */}
              <div className="text-center lg:text-left">
                <h3 className="text-2xl font-bold text-white">{creator.name}</h3>
                <p className="text-gray-400">{creator.role}</p>
                
                {/* Platform Badges */}
                <div className="flex flex-wrap gap-2 mt-3">
                  <div 
                    className="inline-flex items-center gap-2 px-3 py-1 bg-purple-900/30 border border-purple-500/30 rounded-full hover:scale-105 hover:bg-purple-900/40 transition-all"
                  >
                    <span className="text-xs font-medium text-purple-300">{creator.platform}</span>
                  </div>
                  {creator.topPercentage && (
                    <div 
                      className="inline-flex items-center gap-1 px-3 py-1 bg-green-900/30 border border-green-500/30 rounded-full hover:scale-105 transition-transform"
                    >
                      <Star className="w-3 h-3 text-green-400" />
                      <span className="text-xs font-medium text-green-300">Top {creator.topPercentage}</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Testimonial */}
              <blockquote className="relative italic text-gray-300 text-lg">
                <span className="absolute -top-2 -left-2 text-4xl text-purple-500/30">"</span>
                {creator.quote}
                <span className="absolute -bottom-6 -right-2 text-4xl text-purple-500/30">"</span>
              </blockquote>

              {/* Play Video Button */}
              <button
                onClick={() => setIsVideoModalOpen(true)}
                className="group flex items-center gap-2 px-6 py-3 bg-linear-to-r from-purple-600 to-pink-600 rounded-full text-white font-semibold relative overflow-hidden hover:scale-105 active:scale-95 transition-transform"
              >
                <div
                  className="absolute inset-0 bg-white/20 -translate-x-full group-hover:translate-x-full transition-transform duration-500"
                />
                <Play className="w-4 h-4 relative z-10" />
                <span className="relative z-10">Watch {creator.name.split(' ')[0]}\'s Story</span>
              </button>
            </div>

            {/* Revenue Chart Section */}
            <div className="lg:col-span-2">
              <div className="flex justify-between items-start mb-6">
                <div>
                  <h4 className="text-gray-400 text-sm uppercase tracking-wider mb-2">Revenue Growth</h4>
                  <div className="flex items-baseline gap-3">
                    <span className="text-2xl text-gray-500 line-through">
                      ${creator.before.toLocaleString()}
                    </span>
                    <TrendingUp className="w-6 h-6 text-green-500" />
                    <span className="text-4xl font-bold text-white">
                      ${creator.after.toLocaleString()}
                    </span>
                  </div>
                </div>
                <div 
                  className={`text-right transition-transform duration-500 ${isActive ? 'scale-100' : 'scale-0'}`}
                >
                  <span className="text-5xl font-bold bg-linear-to-r from-green-400 to-emerald-400 bg-clip-text text-transparent">
                    +{creator.growthPercentage}%
                  </span>
                  <p className="text-gray-400 text-sm">in {creator.duration}</p>
                </div>
              </div>

              {/* Interactive Chart with Animation */}
              <RevenueChart story={creator} isActive={isActive} />

              {/* Detailed Stats Grid */}
              <div className="grid grid-cols-3 gap-4">
                <motion.div 
                  className="bg-linear-to-br from-gray-800/50 to-gray-900/50 backdrop-blur rounded-xl p-4 border border-gray-700/50"
                  whileHover={{ scale: 1.05, borderColor: 'rgba(147, 51, 234, 0.5)' }}
                  transition={{ type: "spring", stiffness: 400 }}
                >
                  <Calendar className="w-5 h-5 text-purple-400 mb-2" />
                  <p className="text-gray-400 text-xs">Time on Platform</p>
                  <p className="text-white font-bold text-lg">{creator.duration}</p>
                </motion.div>
                <motion.div 
                  className="bg-linear-to-br from-gray-800/50 to-gray-900/50 backdrop-blur rounded-xl p-4 border border-gray-700/50"
                  whileHover={{ scale: 1.05, borderColor: 'rgba(16, 185, 129, 0.5)' }}
                  transition={{ type: "spring", stiffness: 400 }}
                >
                  <TrendingUp className="w-5 h-5 text-green-400 mb-2" />
                  <p className="text-gray-400 text-xs">Monthly Growth</p>
                  <p className="text-white font-bold text-lg">+{creator.monthlyGrowth}%</p>
                </motion.div>
                <motion.div 
                  className="bg-linear-to-br from-gray-800/50 to-gray-900/50 backdrop-blur rounded-xl p-4 border border-gray-700/50"
                  whileHover={{ scale: 1.05, borderColor: 'rgba(236, 72, 153, 0.5)' }}
                  transition={{ type: "spring", stiffness: 400 }}
                >
                  <DollarSign className="w-5 h-5 text-pink-400 mb-2" />
                  <p className="text-gray-400 text-xs">Current MRR</p>
                  <p className="text-white font-bold text-lg">${(creator.currentMRR / 1000).toFixed(0)}K</p>
                </motion.div>
              </div>
            </div>
          </div>
        </div>
      </motion.div>

      {/* Video Modal */}
      <AnimatePresence>
        {isVideoModalOpen && (
          <VideoModal 
            isOpen={isVideoModalOpen} 
            onClose={() => setIsVideoModalOpen(false)}
            creatorName={creator.name}
            videoUrl={creator.videoTestimonialUrl}
          />
        )}
      </AnimatePresence>
    </>
  );
};

export default function AnimatedSuccessStories() {
  const [activeStory, setActiveStory] = useState(0);

  return (
    <section className="py-20 bg-linear-to-b from-black via-gray-950 to-black relative overflow-hidden">
      {/* Background effects */}
      <div className="absolute inset-0">
        <div className="absolute top-1/4 -left-1/4 w-[600px] h-[600px] bg-purple-600/10 rounded-full filter blur-3xl" />
        <div className="absolute bottom-1/4 -right-1/4 w-[600px] h-[600px] bg-pink-600/10 rounded-full filter blur-3xl" />
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <motion.div
          className="text-center mb-16"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6 }}
        >
          <motion.div 
            className="inline-flex items-center gap-2 bg-green-600/20 backdrop-blur-sm text-green-400 px-4 py-2 rounded-full text-sm font-medium mb-6 border border-green-500/30"
            whileHover={{ scale: 1.05 }}
          >
            <Star className="w-4 h-4" />
            <span>Success Stories</span>
          </motion.div>
          
          <h2 className="text-4xl lg:text-6xl font-bold mb-6">
            Real Creators,{' '}
            <span className="text-transparent bg-clip-text bg-linear-to-r from-purple-400 to-pink-400">
              Real Results
            </span>
          </h2>
          <p className="text-xl text-gray-400 max-w-3xl mx-auto">
            Join thousands who transformed their business with Huntaze
          </p>
        </motion.div>

        {/* Carousel */}
        <div className="relative max-w-5xl mx-auto">
          <div className="relative">
            {stories.map((creator, index) => (
              <div
                key={creator.id}
                className={`${index === activeStory ? 'block' : 'hidden'}`}
              >
                <SuccessStoryCard creator={creator} isActive={index === activeStory} />
              </div>
            ))}
          </div>

          {/* Navigation dots */}
          <div className="flex justify-center gap-2 mt-8">
            {stories.map((_, index) => (
              <button
                key={index}
                onClick={() => setActiveStory(index)}
                className={`w-2 h-2 rounded-full transition-all duration-300 ${
                  index === activeStory 
                    ? 'w-8 bg-purple-500' 
                    : 'bg-gray-600 hover:bg-gray-500'
                }`}
              />
            ))}
          </div>

          {/* Navigation arrows */}
          <button
            onClick={() => setActiveStory(prev => prev > 0 ? prev - 1 : stories.length - 1)}
            className="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-full p-4 text-gray-400 hover:text-white transition-colors"
          >
            ←
          </button>
          <button
            onClick={() => setActiveStory(prev => prev < stories.length - 1 ? prev + 1 : 0)}
            className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-full p-4 text-gray-400 hover:text-white transition-colors"
          >
            →
          </button>
        </div>

        {/* Trust signals */}
        <motion.div 
          className="mt-16 text-center"
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ delay: 0.3 }}
        >
          <p className="text-gray-400 mb-4">Featured in</p>
          <div className="flex justify-center items-center gap-8 opacity-60">
            <img src="/logos/techcrunch.svg" alt="TechCrunch" className="h-8" />
            <img src="/logos/forbes.svg" alt="Forbes" className="h-8" />
            <img src="/logos/businessinsider.svg" alt="Business Insider" className="h-8" />
            <img src="/logos/entrepreneur.svg" alt="Entrepreneur" className="h-8" />
          </div>
        </div>
      </div>
    </section>
  );
}