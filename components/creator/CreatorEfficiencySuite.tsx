'use client'

import { useMemo, useState } from 'react'
import {
  Send,
  Reply,
  Sparkles,
  Clock3,
  Zap,
  Inbox,
  Filter,
  CalendarCheck,
  Flame,
} from 'lucide-react'

import type { DashboardStats } from '@/hooks/useData'
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Switch } from '@/components/ui/switch'
import { Progress } from '@/components/ui/progress'
import { Input } from '@/components/ui/input'

export interface EfficiencyFan {
  id: string
  displayName: string
  username?: string | null
  fanTier?: string | null
  totalSpent: number
  daysSincePurchase?: number | null
  status?: string
}

interface ResponseTemplate {
  id: string
  title: string
  category: 'welcome' | 'upsell' | 'retention'
  performance: number
  snippet: string
}

interface PipelineStage {
  id: string
  label: string
  completion: number
  helper: string
}

interface CreatorEfficiencySuiteProps {
  fans?: EfficiencyFan[]
  stats?: DashboardStats | null
}

const baseTemplates: ResponseTemplate[] = [
  {
    id: 'welcome-signature',
    title: 'Signature welcome',
    category: 'welcome',
    performance: 92,
    snippet: 'Hey love, so happy you joined! Check the menu for today\'s surprise…',
  },
  {
    id: 'vip-upsell',
    title: 'VIP upsell drop',
    category: 'upsell',
    performance: 87,
    snippet: 'You unlock tomorrow\'s drop first. Want me to record that custom idea for you?',
  },
  {
    id: 'winback',
    title: '48h win-back',
    category: 'retention',
    performance: 78,
    snippet: 'Kinda miss you in my DMs. Want a private bundle to come back?',
  },
]

const fulfillmentPipeline: PipelineStage[] = [
  { id: 'draft', label: 'Drafted', completion: 86, helper: 'Replies generated by AI, waiting for review.' },
  { id: 'scheduled', label: 'Scheduled', completion: 64, helper: 'Ready to send at optimal engagement windows.' },
  { id: 'delivered', label: 'Delivered', completion: 48, helper: 'Already sent in the last 24 hours.' },
]

const hourBlocks = [
  { block: '09:00 · Morning burst', expectedLift: 28 },
  { block: '18:00 · Evening convert', expectedLift: 41 },
  { block: '23:00 · Night owls', expectedLift: 52 },
]

export function CreatorEfficiencySuite({ fans, stats }: CreatorEfficiencySuiteProps) {
  const [autoScheduling, setAutoScheduling] = useState(true)
  const [autoTemplates, setAutoTemplates] = useState(true)

  const queue = useMemo(() => {
    if (!fans || fans.length === 0) {
      return []
    }

    return fans
      .map((fan) => ({
        ...fan,
        priority: Math.round(fan.totalSpent * 0.4 + (fan.daysSincePurchase ?? 0) * -1.2 + (fan.status === 'Active' ? 12 : 4)),
      }))
      .sort((a, b) => b.priority - a.priority)
      .slice(0, 5)
  }, [fans])

  const vipLiftEstimate = useMemo(() => {
    if (!stats || !fans || fans.length === 0) return 0
    const vipCount = fans.filter((fan) => (fan.fanTier || '').toLowerCase() === 'vip').length || 1
    const baseline = stats.avgRevenuePerFan
    return Math.round((baseline * 1.45 * vipCount) / Math.max(stats.fans, 1))
  }, [stats, fans])

  const segments = useMemo(() => {
    if (!fans) {
      return {
        vip: [],
        whales: [],
        sleepers: [],
      }
    }

    const sorted = [...fans].sort((a, b) => b.totalSpent - a.totalSpent)
    return {
      vip: sorted.filter((fan) => (fan.fanTier || '').toLowerCase() === 'vip').slice(0, 3),
      whales: sorted.slice(0, 3),
      sleepers: sorted.filter((fan) => (fan.daysSincePurchase ?? 0) > 21).slice(0, 3),
    }
  }, [fans])

  return (
    <div className="space-y-6">
      <Card className="border-slate-200 shadow-sm">
        <CardHeader className="flex flex-col gap-3 lg:flex-row lg:items-center lg:justify-between">
          <div>
            <CardTitle className="text-xl">Creator Efficiency</CardTitle>
            <CardDescription>Automate the daily grind of fan messaging, scheduling, and batching.</CardDescription>
          </div>
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <Switch
                checked={autoTemplates}
                onChange={(e) => setAutoTemplates((e.target as HTMLInputElement).checked)}
                aria-label="Toggle smart responses"
              />
              <span className="text-sm text-slate-600">Smart responses</span>
            </div>
            <div className="flex items-center gap-2">
              <Switch
                checked={autoScheduling}
                onChange={(e) => setAutoScheduling((e.target as HTMLInputElement).checked)}
                aria-label="Toggle auto scheduling"
              />
              <span className="text-sm text-slate-600">Auto-schedule</span>
            </div>
          </div>
        </CardHeader>
        <CardContent className="grid gap-6 lg:grid-cols-3">
          <div className="rounded-xl border border-slate-200 bg-slate-900 text-white p-6 shadow-inner">
            <div className="flex items-center gap-3">
              <Sparkles className="h-10 w-10 text-emerald-300" />
              <div>
                <p className="text-sm uppercase tracking-wide text-slate-400">Automation lift</p>
                <p className="text-3xl font-semibold">+{vipLiftEstimate || 18}%</p>
              </div>
            </div>
            <p className="mt-4 text-sm text-slate-300">
              Weighted estimate based on VIP conversion velocity and current automation coverage.
            </p>
            <div className="mt-6 space-y-2 text-xs text-slate-400">
              <div className="flex items-center justify-between">
                <span>24h reply coverage</span>
                <Badge className="bg-emerald-200/60 text-emerald-900">96%</Badge>
              </div>
              <div className="flex items-center justify-between">
                <span>Average response time</span>
                <Badge className="bg-slate-700 text-white">3m 42s</Badge>
              </div>
            </div>
          </div>

          <div className="lg:col-span-2 grid gap-4">
            <div className="rounded-lg border border-slate-200 p-4">
              <div className="flex items-center justify-between text-sm font-medium text-slate-800">
                <div className="flex items-center gap-2">
                  <Inbox className="h-4 w-4" />
                  Priority queue
                </div>
                <Button variant="ghost" size="sm" className="text-xs text-slate-500">
                  View inbox
                </Button>
              </div>
              <div className="mt-3 space-y-3">
                {queue.length === 0 && (
                  <p className="text-xs text-slate-500">Connect OnlyFans and Instagram to populate the smart queue.</p>
                )}
                {queue.map((fan) => (
                  <div key={fan.id} className="flex items-center justify-between rounded-lg border border-slate-200/80 px-3 py-2">
                    <div>
                      <p className="text-sm font-semibold text-slate-800">{fan.displayName}</p>
                      <p className="text-xs text-slate-500">{fan.username ? `@${fan.username}` : 'Direct supporter'} · {fan.status || 'Active'}</p>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-semibold text-slate-800">Priority {fan.priority}</p>
                      <p className="text-xs text-slate-500">Spent ${Math.round(fan.totalSpent).toLocaleString()}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="grid gap-4 lg:grid-cols-2">
              <div className="rounded-lg border border-slate-200 p-4">
                <div className="flex items-center justify-between text-sm font-medium text-slate-800">
                  <div className="flex items-center gap-2">
                    <Reply className="h-4 w-4" />
                    Smart response templates
                  </div>
                  <Button variant="ghost" size="sm" className="text-xs text-slate-500">
                    Manage
                  </Button>
                </div>
                <div className="mt-4 space-y-3">
                  {baseTemplates.map((template) => (
                    <div key={template.id} className="rounded-lg border border-slate-200 px-3 py-2">
                      <div className="flex items-center justify-between text-xs text-slate-500">
                        <Badge className="bg-slate-100 text-slate-700 capitalize">{template.category}</Badge>
                        <span>CTR +{template.performance}%</span>
                      </div>
                      <p className="mt-2 text-sm font-medium text-slate-800">{template.title}</p>
                      <p className="text-xs text-slate-500">{template.snippet}</p>
                    </div>
                  ))}
                </div>
              </div>

              <div className="rounded-lg border border-slate-200 p-4">
                <div className="flex items-center justify-between text-sm font-medium text-slate-800">
                  <div className="flex items-center gap-2">
                    <Clock3 className="h-4 w-4" />
                    Optimal send windows
                  </div>
                  <Button variant="ghost" size="sm" className="text-xs text-slate-500">
                    Sync calendar
                  </Button>
                </div>
                <div className="mt-4 space-y-3">
                  {hourBlocks.map((slot) => (
                    <div key={slot.block} className="flex items-center justify-between rounded-lg border border-slate-200 px-3 py-2">
                      <span className="text-sm font-medium text-slate-700">{slot.block}</span>
                      <Badge className="bg-emerald-100 text-emerald-700">+{slot.expectedLift}%</Badge>
                    </div>
                  ))}
                  <div className="rounded-lg border border-dashed border-slate-300 bg-slate-50 p-3 text-xs text-slate-500">
                    Connect Reddit to add promo bursts from cross-platform automations.
                  </div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="grid gap-6 lg:grid-cols-[2fr_1fr]">
        <Card className="border-slate-200 shadow-sm">
          <CardHeader>
            <div className="flex items-center gap-2">
              <Flame className="h-5 w-5 text-slate-500" />
              <CardTitle>Segmentation radar</CardTitle>
            </div>
            <CardDescription>Automatically group fans into actionable segments.</CardDescription>
          </CardHeader>
          <CardContent className="grid gap-4 lg:grid-cols-3">
            <SegmentColumn title="VIP Boosters" helper="Always prioritize these conversations for premium upsells." items={segments.vip} emptyLabel="Assign VIP tags to highlight high-touch fans." />
            <SegmentColumn title="Spending whales" helper="Large lifetime spenders ready for bundles." items={segments.whales} emptyLabel="Unlock revenue data to surface whales." />
            <SegmentColumn title="Sleeping fans" helper="Automate win-back series for inactive supporters." items={segments.sleepers} emptyLabel="Inactive fans appear after 21 days of silence." />
          </CardContent>
        </Card>

        <Card className="border-slate-200 shadow-sm">
          <CardHeader>
            <div className="flex items-center gap-2">
              <Zap className="h-5 w-5 text-slate-500" />
              <CardTitle>Batch studio</CardTitle>
            </div>
            <CardDescription>Prep, approve, and deploy content in blocks.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {fulfillmentPipeline.map((stage) => (
              <div key={stage.id} className="space-y-2">
                <div className="flex items-center justify-between text-sm font-medium text-slate-700">
                  <span>{stage.label}</span>
                  <span>{stage.completion}%</span>
                </div>
                <Progress value={stage.completion} />
                <p className="text-xs text-slate-500">{stage.helper}</p>
              </div>
            ))}
            <div className="rounded-lg border border-slate-200 bg-slate-50 p-3 text-xs text-slate-500">
              Syncing {fans?.length ?? 0} fans. Auto-assignment pushes ready content into AI drafts.
            </div>
            <Button className="w-full" variant="outline" size="sm">
              <CalendarCheck className="mr-2 h-4 w-4" />
              Approve next 20 sends
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

function SegmentColumn({ title, helper, items, emptyLabel }: { title: string; helper: string; items: EfficiencyFan[]; emptyLabel: string }) {
  return (
    <div className="space-y-3">
      <div>
        <p className="text-sm font-semibold text-slate-800">{title}</p>
        <p className="text-xs text-slate-500">{helper}</p>
      </div>
      <div className="space-y-2">
        {items.length === 0 && <p className="text-xs text-slate-400">{emptyLabel}</p>}
        {items.map((fan) => (
          <div key={fan.id} className="rounded-lg border border-slate-200 px-3 py-2">
            <p className="text-sm font-medium text-slate-800">{fan.displayName}</p>
            <p className="text-xs text-slate-500">Spent ${Math.round(fan.totalSpent).toLocaleString()}</p>
          </div>
        ))}
      </div>
    </div>
  )
}
