AWSTemplateFormatVersion: '2010-09-09'
Description: 'Huntaze Media Processing Stack - Lambda + Rekognition + DynamoDB + S3'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name
  
  AlertEmail:
    Type: String
    Default: alerts@huntaze.com
    Description: Email for moderation alerts
  
  CostCenter:
    Type: String
    Default: HUNTAZE
  Owner:
    Type: String
    Default: Platform

  OpsAlertsTopicArn:
    Type: String
    Default: ''
    Description: Optional SNS Topic ARN for ops alerts (leave empty to skip)

Conditions:
  IsProd: !Equals [!Ref Environment, "production"]
  HasOpsTopic: !Not [!Equals [!Ref OpsAlertsTopicArn, '']]

Resources:
  # S3 Bucket for media storage
  MediaVaultBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'huntaze-media-vault-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt ImageProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpg
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt ImageProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpeg
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt ImageProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .png
    DependsOn:
      - LambdaInvokePermission

  # DynamoDB table for metadata
  MediaVaultTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub 'HuntazeMediaVault-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: mediaId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: uploadDate
          AttributeType: S
      KeySchema:
        - AttributeName: mediaId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: uploadDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Application
          Value: Huntaze
        - Key: Environment
          Value: !Ref Environment

  # SQS Queues
  AlertQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'huntaze-alerts-${Environment}'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
      SqsManagedSseEnabled: true

  EnrichmentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'huntaze-enrichment-${Environment}'
      MessageRetentionPeriod: 345600  # 4 days
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5
      SqsManagedSseEnabled: true

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'huntaze-dlq-${Environment}'
      MessageRetentionPeriod: 1209600  # 14 days
      SqsManagedSseEnabled: true

  # SNS Topic for alerts
  ModerationAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'huntaze-moderation-alerts-${Environment}'
      DisplayName: 'Huntaze Content Moderation Alerts'
      Subscription:
        - Endpoint: !Ref AlertEmail
          Protocol: email

  # Lambda function for image processing
  ImageProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'huntaze-image-processor-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          const { RekognitionClient, DetectModerationLabelsCommand } = require('@aws-sdk/client-rekognition');
          const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
          const { DynamoDBDocumentClient, PutCommand } = require('@aws-sdk/lib-dynamodb');
          const { SQSClient, SendMessageCommand } = require('@aws-sdk/client-sqs');
          const { SNSClient, PublishCommand } = require('@aws-sdk/client-sns');
          const { S3Client, HeadObjectCommand } = require('@aws-sdk/client-s3');
          
          const rekognition = new RekognitionClient();
          const dynamodb = DynamoDBDocumentClient.from(new DynamoDBClient());
          const sqs = new SQSClient();
          const sns = new SNSClient();
          const s3 = new S3Client();

          const looksLikeImageKey = (key = '') => /\.(png|jpe?g)$/i.test(key);
          
          exports.handler = async (event) => {
            console.log('Processing S3 event:', JSON.stringify(event));
            
            for (const record of event.Records) {
              const bucket = record.s3.bucket.name;
              const key = decodeURIComponent(record.s3.object.key.replace(/\+/g, ' '));
              
              try {
                // 1. Analyze with Rekognition
                // Skip non-image files early (by extension or Content-Type head)
                let contentType = '';
                try {
                  const head = await s3.send(new HeadObjectCommand({ Bucket: bucket, Key: key }));
                  contentType = head.ContentType || '';
                } catch (e) {
                  // ignore head errors, rely on key extension
                }
                const isImage = looksLikeImageKey(key) || /^image\//i.test(contentType);
                if (!isImage) {
                  console.log(`Skipping non-image object: ${key} (Content-Type=${contentType || 'unknown'})`);
                  continue;
                }

                const moderationResult = await rekognition.send(new DetectModerationLabelsCommand({
                  Image: {
                    S3Object: { Bucket: bucket, Name: key }
                  },
                  MinConfidence: 60
                }));
                
                const labels = moderationResult.ModerationLabels || [];
                
                // 2. Determine content status
                const explicitContent = labels.some(l => 
                  l.ParentName === 'Explicit Nudity' || l.Name === 'Nudity'
                );
                const violence = labels.some(l => 
                  l.ParentName === 'Violence' && l.Confidence > 80
                );
                
                const status = violence ? 'blocked' : 
                              explicitContent ? 'explicit' : 'safe';
                
                // 3. Save to DynamoDB
                const mediaRecord = {
                  mediaId: key,
                  userId: key.split('/')[0], // Assuming folder structure: userId/filename
                  uploadDate: new Date().toISOString(),
                  bucket,
                  status,
                  moderationLabels: labels,
                  analyzedAt: new Date().toISOString()
                };
                
                await dynamodb.send(new PutCommand({
                  TableName: process.env.MEDIA_TABLE,
                  Item: mediaRecord
                }));
                
                // 4. Send alerts for blocked content
                if (status === 'blocked') {
                  await sns.send(new PublishCommand({
                    TopicArn: process.env.ALERT_TOPIC,
                    Subject: 'Content Blocked - Immediate Review Required',
                    Message: JSON.stringify({
                      mediaId: key,
                      reason: 'Violence detected',
                      labels: labels.filter(l => l.Confidence > 80)
                    }, null, 2)
                  }));
                }
                
                // 5. Queue for enrichment if approved
                if (status !== 'blocked') {
                  await sqs.send(new SendMessageCommand({
                    QueueUrl: process.env.ENRICHMENT_QUEUE,
                    MessageBody: JSON.stringify({
                      mediaId: key,
                      status,
                      labels
                    })
                  }));
                }
                
                console.log(`Processed ${key}: ${status}`);
                
              } catch (error) {
                console.error(`Error processing ${key}:`, error);
                
                // Send to DLQ
                await sqs.send(new SendMessageCommand({
                  QueueUrl: process.env.DLQ_URL,
                  MessageBody: JSON.stringify({
                    error: error.message,
                    bucket,
                    key,
                    timestamp: new Date().toISOString()
                  })
                }));
              }
            }
          };
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          MEDIA_TABLE: !Ref MediaVaultTable
          ALERT_QUEUE: !Ref AlertQueue
          ENRICHMENT_QUEUE: !Ref EnrichmentQueue
          DLQ_URL: !Ref DeadLetterQueue
          ALERT_TOPIC: !Ref ModerationAlertTopic
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
          LOG_LEVEL: info
      Role: !GetAtt LambdaExecutionRole.Arn
      TracingConfig:
        Mode: Active
      ReservedConcurrentExecutions: 10

  # Lambda permission for S3 to invoke
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::huntaze-media-vault-${Environment}'
      SourceAccount: !Ref AWS::AccountId

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'HuntazeImageProcessorRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MediaProcessingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:HeadObject
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::huntaze-media-vault-${Environment}/*'
              - Effect: Allow
                Action:
                  - rekognition:DetectModerationLabels
                  - rekognition:DetectLabels
                  - rekognition:DetectText
                  - rekognition:DetectFaces
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt MediaVaultTable.Arn
                  - !Sub '${MediaVaultTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt AlertQueue.Arn
                  - !GetAtt EnrichmentQueue.Arn
                  - !GetAtt DeadLetterQueue.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ModerationAlertTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/huntaze-image-processor-${Environment}'
      RetentionInDays: 30

  # CloudWatch Alarms
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-ImageProcessor-Errors'
      AlarmDescription: 'High error rate in image processing (>=1/min)'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ImageProcessorFunction
      AlarmActions:
        - !Ref ModerationAlertTopic
        - !If [HasOpsTopic, !Ref OpsAlertsTopicArn, !Ref 'AWS::NoValue']

  ImageProcessorDurationP95Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-ImageProcessor-Duration-P95'
      AlarmDescription: 'Image processor p95 duration too high'
      Namespace: AWS/Lambda
      MetricName: Duration
      ExtendedStatistic: p95
      Period: 60
      EvaluationPeriods: 5
      Threshold: 20000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref ImageProcessorFunction
      AlarmActions:
        - !Ref ModerationAlertTopic
        - !If [HasOpsTopic, !Ref OpsAlertsTopicArn, !Ref 'AWS::NoValue']


Outputs:
  BucketName:
    Description: S3 bucket for media uploads
    Value: !Ref MediaVaultBucket
    Export:
      Name: !Sub '${AWS::StackName}-MediaBucket'

  TableName:
    Description: DynamoDB table for media metadata
    Value: !Ref MediaVaultTable
    Export:
      Name: !Sub '${AWS::StackName}-MediaTable'

  LambdaFunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt ImageProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ProcessorArn'

  AlertTopicArn:
    Description: SNS topic for alerts
    Value: !Ref ModerationAlertTopic
    Export:
      Name: !Sub '${AWS::StackName}-AlertTopic'

  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${MonitoringDashboard}'
